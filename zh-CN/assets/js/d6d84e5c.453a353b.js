"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[3636],{15680:(n,e,t)=>{t.d(e,{xA:()=>l,yg:()=>m});var r=t(96540);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var i=r.createContext({}),u=function(n){var e=r.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},l=function(n){var e=u(n.components);return r.createElement(i.Provider,{value:e},n.children)},p="mdxType",f={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},b=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,i=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),p=u(t),b=o,m=p["".concat(i,".").concat(b)]||p[b]||f[b]||a;return t?r.createElement(m,s(s({ref:e},l),{},{components:t})):r.createElement(m,s({ref:e},l))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,s=new Array(a);s[0]=b;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=n,c[p]="string"==typeof n?n:o,s[1]=c;for(var u=2;u<a;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},63894:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var r=t(58168),o=(t(96540),t(15680));const a={},s="Protobuf \u683c\u5f0f",c={unversionedId:"connector-v2/formats/protobuf",id:"version-2.3.9/connector-v2/formats/protobuf",title:"Protobuf \u683c\u5f0f",description:"Protobuf\uff08Protocol Buffers\uff09\u662f\u4e00\u79cd\u7531Google\u5f00\u53d1\u7684\u8bed\u8a00\u4e2d\u7acb\u3001\u5e73\u53f0\u65e0\u5173\u7684\u6570\u636e\u5e8f\u5217\u5316\u683c\u5f0f\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u9ad8\u6548\u7684\u65b9\u5f0f\u6765\u7f16\u7801\u7ed3\u6784\u5316\u6570\u636e\uff0c\u540c\u65f6\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\u548c\u5e73\u53f0\u3002",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/version-2.3.9/connector-v2/formats/protobuf.md",sourceDirName:"connector-v2/formats",slug:"/connector-v2/formats/protobuf",permalink:"/zh-CN/docs/2.3.9/connector-v2/formats/protobuf",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/i18n/zh-CN/docusaurus-plugin-content-docs/version-2.3.9/connector-v2/formats/protobuf.md",tags:[],version:"2.3.9",frontMatter:{},sidebar:"docs",previous:{title:"Ogg \u683c\u5f0f",permalink:"/zh-CN/docs/2.3.9/connector-v2/formats/ogg-json"},next:{title:"Source Common Options",permalink:"/zh-CN/docs/2.3.9/connector-v2/source-common-options"}},i={},u=[{value:"Kafka \u4f7f\u7528\u793a\u4f8b",id:"kafka-\u4f7f\u7528\u793a\u4f8b",level:2}],l={toc:u},p="wrapper";function f(n){let{components:e,...t}=n;return(0,o.yg)(p,(0,r.A)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"protobuf-\u683c\u5f0f"},"Protobuf \u683c\u5f0f"),(0,o.yg)("p",null,"Protobuf\uff08Protocol Buffers\uff09\u662f\u4e00\u79cd\u7531Google\u5f00\u53d1\u7684\u8bed\u8a00\u4e2d\u7acb\u3001\u5e73\u53f0\u65e0\u5173\u7684\u6570\u636e\u5e8f\u5217\u5316\u683c\u5f0f\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u9ad8\u6548\u7684\u65b9\u5f0f\u6765\u7f16\u7801\u7ed3\u6784\u5316\u6570\u636e\uff0c\u540c\u65f6\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\u548c\u5e73\u53f0\u3002"),(0,o.yg)("p",null,"\u76ee\u524d\u652f\u6301\u5728 Kafka \u4e2d\u4f7f\u7528 protobuf \u683c\u5f0f\u3002"),(0,o.yg)("h2",{id:"kafka-\u4f7f\u7528\u793a\u4f8b"},"Kafka \u4f7f\u7528\u793a\u4f8b"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"\u6a21\u62df\u968f\u673a\u751f\u6210\u6570\u636e\u6e90,\u5e76\u4ee5 protobuf \u7684\u683c\u5f0f \u5199\u5165 kafka \u7684\u5b9e\u4f8b")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-hocon"},'env {\n    parallelism = 1\n    job.mode = "BATCH"\n}\n\nsource {\n   FakeSource {\n      parallelism = 1\n      plugin_output = "fake"\n      row.num = 16\n      schema = {\n        fields {\n          c_int32 = int\n          c_int64 = long\n          c_float = float\n          c_double = double\n          c_bool = boolean\n          c_string = string\n          c_bytes = bytes\n\n          Address {\n              city = string\n              state = string\n              street = string\n          }\n          attributes = "map<string,float>"\n          phone_numbers = "array<string>"\n        }\n      }\n    }\n}\n\nsink {\n  kafka {\n      topic = "test_protobuf_topic_fake_source"\n      bootstrap.servers = "kafkaCluster:9092"\n      format = protobuf\n      kafka.request.timeout.ms = 60000\n      kafka.config = {\n        acks = "all"\n        request.timeout.ms = 60000\n        buffer.memory = 33554432\n      }\n      protobuf_message_name = Person\n      protobuf_schema = """\n              syntax = "proto3";\n\n              package org.apache.seatunnel.format.protobuf;\n\n              option java_outer_classname = "ProtobufE2E";\n\n              message Person {\n                int32 c_int32 = 1;\n                int64 c_int64 = 2;\n                float c_float = 3;\n                double c_double = 4;\n                bool c_bool = 5;\n                string c_string = 6;\n                bytes c_bytes = 7;\n\n                message Address {\n                  string street = 1;\n                  string city = 2;\n                  string state = 3;\n                  string zip = 4;\n                }\n\n                Address address = 8;\n\n                map<string, float> attributes = 9;\n\n                repeated string phone_numbers = 10;\n              }\n              """\n  }\n}\n')),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"\u4ece kafka \u8bfb\u53d6 protobuf \u683c\u5f0f\u7684\u6570\u636e\u5e76\u6253\u5370\u5230\u63a7\u5236\u53f0\u7684\u793a\u4f8b")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-hocon"},'env {\n    parallelism = 1\n    job.mode = "BATCH"\n}\n\nsource {\n    Kafka {\n        topic = "test_protobuf_topic_fake_source"\n        format = protobuf\n        protobuf_message_name = Person\n        protobuf_schema = """\n            syntax = "proto3";\n\n            package org.apache.seatunnel.format.protobuf;\n\n            option java_outer_classname = "ProtobufE2E";\n\n            message Person {\n                int32 c_int32 = 1;\n                int64 c_int64 = 2;\n                float c_float = 3;\n                double c_double = 4;\n                bool c_bool = 5;\n                string c_string = 6;\n                bytes c_bytes = 7;\n\n                message Address {\n                    string street = 1;\n                    string city = 2;\n                    string state = 3;\n                    string zip = 4;\n                }\n\n                Address address = 8;\n\n                map<string, float> attributes = 9;\n\n                repeated string phone_numbers = 10;\n            }\n        """\n        schema = {\n            fields {\n                c_int32 = int\n                c_int64 = long\n                c_float = float\n                c_double = double\n                c_bool = boolean\n                c_string = string\n                c_bytes = bytes\n\n                Address {\n                    city = string\n                    state = string\n                    street = string\n                }\n                attributes = "map<string,float>"\n                phone_numbers = "array<string>"\n            }\n        }\n        bootstrap.servers = "kafkaCluster:9092"\n        start_mode = "earliest"\n        plugin_output = "kafka_table"\n    }\n}\n\nsink {\n  Console {\n    plugin_input = "kafka_table"\n  }\n}\n')))}f.isMDXComponent=!0}}]);