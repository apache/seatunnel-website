"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[27366,96477],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),g=a,y=d["".concat(s,".").concat(g)]||d[g]||u[g]||o;return t?r.createElement(y,l(l({ref:n},p),{},{components:t})):r.createElement(y,l({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},99039:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(58168),a=(t(96540),t(15680));const o={},l=void 0,i={unversionedId:"connector-v2/changelog/connector-cloudberry",id:"connector-v2/changelog/connector-cloudberry",title:"connector-cloudberry",description:"Change Log",source:"@site/docs/connector-v2/changelog/connector-cloudberry.md",sourceDirName:"connector-v2/changelog",slug:"/connector-v2/changelog/connector-cloudberry",permalink:"/zh-CN/docs/connector-v2/changelog/connector-cloudberry",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/connector-v2/changelog/connector-cloudberry.md",tags:[],version:"current",frontMatter:{}},s={},c=[],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(d,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("details",null,(0,a.yg)("summary",null," Change Log "),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Change"),(0,a.yg)("th",{parentName:"tr",align:null},"Commit"),(0,a.yg)("th",{parentName:"tr",align:null},"Version"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"[Feature][Connector]"," Add Apache Cloudberry Support (#8985)"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/b6f82c1"},"https://github.com/apache/seatunnel/commit/b6f82c1")),(0,a.yg)("td",{parentName:"tr",align:null},"dev"))))))}u.isMDXComponent=!0},58794:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=t(58168),a=(t(96540),t(15680)),o=t(99039);const l={},i="Cloudberry",s={unversionedId:"connector-v2/sink/Cloudberry",id:"connector-v2/sink/Cloudberry",title:"Cloudberry",description:"JDBC Cloudberry  Sink Connector",source:"@site/docs/connector-v2/sink/Cloudberry.md",sourceDirName:"connector-v2/sink",slug:"/connector-v2/sink/Cloudberry",permalink:"/zh-CN/docs/connector-v2/sink/Cloudberry",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/connector-v2/sink/Cloudberry.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ClickhouseFile",permalink:"/zh-CN/docs/connector-v2/sink/ClickhouseFile"},next:{title:"Console",permalink:"/zh-CN/docs/connector-v2/sink/Console"}},c={},p=[{value:"Support Those Engines",id:"support-those-engines",level:2},{value:"Description",id:"description",level:2},{value:"Using Dependency",id:"using-dependency",level:2},{value:"For Spark/Flink Engine",id:"for-sparkflink-engine",level:3},{value:"For SeaTunnel Zeta Engine",id:"for-seatunnel-zeta-engine",level:3},{value:"Key Features",id:"key-features",level:2},{value:"Supported DataSource Info",id:"supported-datasource-info",level:2},{value:"Database Dependency",id:"database-dependency",level:2},{value:"Data Type Mapping",id:"data-type-mapping",level:2},{value:"Options",id:"options",level:2},{value:"Task Example",id:"task-example",level:2},{value:"Simple:",id:"simple",level:3},{value:"Generate Sink SQL",id:"generate-sink-sql",level:3},{value:"Exactly-once:",id:"exactly-once",level:3},{value:"CDC(Change Data Capture) Event",id:"cdcchange-data-capture-event",level:3},{value:"Save mode function",id:"save-mode-function",level:3},{value:"Changelog",id:"changelog",level:2}],d={toc:p},u="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"cloudberry"},"Cloudberry"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"JDBC Cloudberry  Sink Connector")),(0,a.yg)("h2",{id:"support-those-engines"},"Support Those Engines"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Spark",(0,a.yg)("br",null),"\nFlink",(0,a.yg)("br",null),"\nSeaTunnel Zeta",(0,a.yg)("br",null))),(0,a.yg)("h2",{id:"description"},"Description"),(0,a.yg)("p",null,"Write data through JDBC. Cloudberry currently does not have its own native driver. It uses PostgreSQL's driver for connectivity and follows PostgreSQL's implementation."),(0,a.yg)("p",null,"Support Batch mode and Streaming mode, support concurrent writing, support exactly-once\nsemantics (using XA transaction guarantee)."),(0,a.yg)("h2",{id:"using-dependency"},"Using Dependency"),(0,a.yg)("h3",{id:"for-sparkflink-engine"},"For Spark/Flink Engine"),(0,a.yg)("blockquote",null,(0,a.yg)("ol",{parentName:"blockquote"},(0,a.yg)("li",{parentName:"ol"},"You need to ensure that the ",(0,a.yg)("a",{parentName:"li",href:"https://mvnrepository.com/artifact/org.postgresql/postgresql"},"jdbc driver jar package")," has been placed in directory ",(0,a.yg)("inlineCode",{parentName:"li"},"${SEATUNNEL_HOME}/plugins/"),"."))),(0,a.yg)("h3",{id:"for-seatunnel-zeta-engine"},"For SeaTunnel Zeta Engine"),(0,a.yg)("blockquote",null,(0,a.yg)("ol",{parentName:"blockquote"},(0,a.yg)("li",{parentName:"ol"},"You need to ensure that the ",(0,a.yg)("a",{parentName:"li",href:"https://mvnrepository.com/artifact/org.postgresql/postgresql"},"jdbc driver jar package")," has been placed in directory ",(0,a.yg)("inlineCode",{parentName:"li"},"${SEATUNNEL_HOME}/lib/"),"."))),(0,a.yg)("h2",{id:"key-features"},"Key Features"),(0,a.yg)("ul",{className:"contains-task-list"},(0,a.yg)("li",{parentName:"ul",className:"task-list-item"},(0,a.yg)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,a.yg)("a",{parentName:"li",href:"../../concept/connector-v2-features.md"},"exactly-once")),(0,a.yg)("li",{parentName:"ul",className:"task-list-item"},(0,a.yg)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,a.yg)("a",{parentName:"li",href:"../../concept/connector-v2-features.md"},"cdc"))),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Use ",(0,a.yg)("inlineCode",{parentName:"p"},"Xa transactions")," to ensure ",(0,a.yg)("inlineCode",{parentName:"p"},"exactly-once"),". So only support ",(0,a.yg)("inlineCode",{parentName:"p"},"exactly-once")," for the database which is\nsupport ",(0,a.yg)("inlineCode",{parentName:"p"},"Xa transactions"),". You can set ",(0,a.yg)("inlineCode",{parentName:"p"},"is_exactly_once=true")," to enable it.")),(0,a.yg)("h2",{id:"supported-datasource-info"},"Supported DataSource Info"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Datasource"),(0,a.yg)("th",{parentName:"tr",align:null},"Supported Versions"),(0,a.yg)("th",{parentName:"tr",align:null},"Driver"),(0,a.yg)("th",{parentName:"tr",align:null},"Url"),(0,a.yg)("th",{parentName:"tr",align:null},"Maven"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Cloudberry"),(0,a.yg)("td",{parentName:"tr",align:null},"Uses PostgreSQL driver implementation"),(0,a.yg)("td",{parentName:"tr",align:null},"org.postgresql.Driver"),(0,a.yg)("td",{parentName:"tr",align:null},"jdbc:postgresql://localhost:5432/test"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://mvnrepository.com/artifact/org.postgresql/postgresql"},"Download"))))),(0,a.yg)("h2",{id:"database-dependency"},"Database Dependency"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Please download the PostgreSQL driver jar and copy it to the '$SEATUNNEL_HOME/plugins/jdbc/lib/' working directory",(0,a.yg)("br",null),"\nFor example: cp postgresql-xxx.jar $SEATUNNEL_HOME/plugins/jdbc/lib/")),(0,a.yg)("h2",{id:"data-type-mapping"},"Data Type Mapping"),(0,a.yg)("p",null,"Cloudberry uses PostgreSQL's data type implementation. Please refer to PostgreSQL documentation for data type compatibility and mappings."),(0,a.yg)("h2",{id:"options"},"Options"),(0,a.yg)("p",null,"Cloudberry connector uses the same options as PostgreSQL. For detailed configuration options, please refer to the PostgreSQL documentation."),(0,a.yg)("p",null,"Key options include:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"url (required): The JDBC connection URL"),(0,a.yg)("li",{parentName:"ul"},"driver (required): The driver class name (org.postgresql.Driver)"),(0,a.yg)("li",{parentName:"ul"},"user/password: Authentication credentials"),(0,a.yg)("li",{parentName:"ul"},"query or database/table combination: What data to write and how"),(0,a.yg)("li",{parentName:"ul"},"is_exactly_once: Enable exactly-once semantics with XA transactions"),(0,a.yg)("li",{parentName:"ul"},"batch_size: Control batch writing behavior")),(0,a.yg)("h2",{id:"task-example"},"Task Example"),(0,a.yg)("h3",{id:"simple"},"Simple:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-hocon"},'env {\n  parallelism = 1\n  job.mode = "BATCH"\n}\n\nsource {\n  FakeSource {\n    parallelism = 1\n    plugin_output = "fake"\n    row.num = 16\n    schema = {\n      fields {\n        name = "string"\n        age = "int"\n      }\n    }\n  }\n}\n\nsink {\n  jdbc {\n    url = "jdbc:postgresql://localhost:5432/cloudberrydb"\n    driver = "org.postgresql.Driver"\n    user = "dbadmin"\n    password = "password"\n    query = "insert into test_table(name,age) values(?,?)"\n  }\n}\n')),(0,a.yg)("h3",{id:"generate-sink-sql"},"Generate Sink SQL"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-hocon"},'sink {\n  Jdbc {\n    url = "jdbc:postgresql://localhost:5432/cloudberrydb"\n    driver = "org.postgresql.Driver"\n    user = "dbadmin"\n    password = "password"\n    \n    generate_sink_sql = true\n    database = "mydb"\n    table = "public.test_table"\n  }\n}\n')),(0,a.yg)("h3",{id:"exactly-once"},"Exactly-once:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-hocon"},'sink {\n  jdbc {\n    url = "jdbc:postgresql://localhost:5432/cloudberrydb"\n    driver = "org.postgresql.Driver"\n    user = "dbadmin"\n    password = "password"\n    query = "insert into test_table(name,age) values(?,?)"\n    \n    is_exactly_once = "true"\n    xa_data_source_class_name = "org.postgresql.xa.PGXADataSource"\n  }\n}\n')),(0,a.yg)("h3",{id:"cdcchange-data-capture-event"},"CDC(Change Data Capture) Event"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-hocon"},'sink {\n  jdbc {\n    url = "jdbc:postgresql://localhost:5432/cloudberrydb"\n    driver = "org.postgresql.Driver"\n    user = "dbadmin"\n    password = "password"\n    \n    generate_sink_sql = true\n    database = "mydb"\n    table = "sink_table"\n    primary_keys = ["id","name"]\n    field_ide = UPPERCASE\n  }\n}\n')),(0,a.yg)("h3",{id:"save-mode-function"},"Save mode function"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-hocon"},'sink {\n  Jdbc {\n    url = "jdbc:postgresql://localhost:5432/cloudberrydb"\n    driver = "org.postgresql.Driver"\n    user = "dbadmin"\n    password = "password"\n    \n    generate_sink_sql = true\n    database = "mydb"\n    table = "public.test_table"\n    schema_save_mode = "CREATE_SCHEMA_WHEN_NOT_EXIST"\n    data_save_mode = "APPEND_DATA"\n  }\n}\n')),(0,a.yg)("p",null,"For more detailed examples and options, please refer to the PostgreSQL connector documentation."),(0,a.yg)("h2",{id:"changelog"},"Changelog"),(0,a.yg)(o.default,{mdxType:"ChangeLog"}))}g.isMDXComponent=!0}}]);