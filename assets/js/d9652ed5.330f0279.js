"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[63251,25145],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>c});var a=n(96540);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var m=a.createContext({}),o=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(m.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,m=e.parentName,u=g(e,["components","mdxType","originalType","parentName"]),p=o(n),s=l,c=p["".concat(m,".").concat(s)]||p[s]||d[s]||r;return n?a.createElement(c,i(i({ref:t},u),{},{components:n})):a.createElement(c,i({ref:t},u))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=s;var g={};for(var m in t)hasOwnProperty.call(t,m)&&(g[m]=t[m]);g.originalType=e,g[p]="string"==typeof e?e:l,i[1]=g;for(var o=2;o<r;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},77662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>g,toc:()=>o});var a=n(58168),l=(n(96540),n(15680));const r={},i=void 0,g={unversionedId:"connector-v2/changelog/connector-assert",id:"connector-v2/changelog/connector-assert",title:"connector-assert",description:"Change Log",source:"@site/docs/connector-v2/changelog/connector-assert.md",sourceDirName:"connector-v2/changelog",slug:"/connector-v2/changelog/connector-assert",permalink:"/docs/connector-v2/changelog/connector-assert",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/connector-v2/changelog/connector-assert.md",tags:[],version:"current",frontMatter:{}},m={},o=[],u={toc:o},p="wrapper";function d(e){let{components:t,...n}=e;return(0,l.yg)(p,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("details",null,(0,l.yg)("summary",null," Change Log "),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Change"),(0,l.yg)("th",{parentName:"tr",align:null},"Commit"),(0,l.yg)("th",{parentName:"tr",align:null},"Version"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve]"," restruct connector common options (#8634)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/f3499a6eeb"},"https://github.com/apache/seatunnel/commit/f3499a6eeb")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.10")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[improve]"," add assert options (#8620)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/b159cc0c75"},"https://github.com/apache/seatunnel/commit/b159cc0c75")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.10")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][API]"," Support timestamp with timezone offset (#8367)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/e18bfeabd2"},"https://github.com/apache/seatunnel/commit/e18bfeabd2")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[fix][connector-v2]","[connector-assert]"," Optimize Assert Sink verification method (#8356)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/5c9159d7cd"},"https://github.com/apache/seatunnel/commit/5c9159d7cd")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][dist]","add shade check rule (#8136)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/51ef800016"},"https://github.com/apache/seatunnel/commit/51ef800016")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][File]"," Support config null format for text file read (#8109)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/2dbf02df47"},"https://github.com/apache/seatunnel/commit/2dbf02df47")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Transform-V2]"," Support transform with multi-table (#7628)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/72c9c4576d"},"https://github.com/apache/seatunnel/commit/72c9c4576d")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][API]"," Unified tables_configs and table_list (#8100)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/84c0b8d660"},"https://github.com/apache/seatunnel/commit/84c0b8d660")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Fix][API]"," Fix column length can not be long (#8039)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/16cf632d3e"},"https://github.com/apache/seatunnel/commit/16cf632d3e")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Restapi]"," Allow metrics information to be associated to logical plan nodes (#7786)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/6b7c53d03c"},"https://github.com/apache/seatunnel/commit/6b7c53d03c")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Connector-V2]"," Assert support multi-table check (#7687)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/c4778a2497"},"https://github.com/apache/seatunnel/commit/c4778a2497")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.8")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Transform]"," Add embedding transform (#7534)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/3310cfcd34"},"https://github.com/apache/seatunnel/commit/3310cfcd34")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.8")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector]"," Add multi-table sink option check (#7360)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/2489f6446b"},"https://github.com/apache/seatunnel/commit/2489f6446b")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.7")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Core]"," Support using upstream table placeholders in sink options and auto replacement (#7131)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/c4ca74122c"},"https://github.com/apache/seatunnel/commit/c4ca74122c")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.6")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Hotfix]"," fix http source can not read yyyy-MM-dd HH:mm:ss format bug ","&"," Improve DateTime Utils (#6601)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/19888e7969"},"https://github.com/apache/seatunnel/commit/19888e7969")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.5")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Connector-V2]","[Assert]"," Support field type assert and field value equality assert for full data types (#6275)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/576919bfab"},"https://github.com/apache/seatunnel/commit/576919bfab")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Connector-V2]","[Assert]"," Support check the precision and scale of Decimal type. (#6110)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/dd64ed52d4"},"https://github.com/apache/seatunnel/commit/dd64ed52d4")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Hotfix][SQL Transform]"," Fix cast to timestamp, date, time bug (#5812)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/de181de02a"},"https://github.com/apache/seatunnel/commit/de181de02a")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Common]"," Introduce new error define rule (#5793)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/9d1b2582b2"},"https://github.com/apache/seatunnel/commit/9d1b2582b2")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve]"," Remove use ",(0,l.yg)("inlineCode",{parentName:"td"},"SeaTunnelSink::getConsumedType")," method and mark it as deprecated (#5755)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/8de7408100"},"https://github.com/apache/seatunnel/commit/8de7408100")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve]"," Add default implement for ",(0,l.yg)("inlineCode",{parentName:"td"},"SeaTunnelSink::setTypeInfo")," (#5682)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/86cba87450"},"https://github.com/apache/seatunnel/commit/86cba87450")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Fix]"," Fix log error when multi-table sink close (#5683)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/fea4b6f268"},"https://github.com/apache/seatunnel/commit/fea4b6f268")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"Support config tableIdentifier for schema (#5628)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/652921fb75"},"https://github.com/apache/seatunnel/commit/652921fb75")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature]"," Add ",(0,l.yg)("inlineCode",{parentName:"td"},"table-names")," from FakeSource/Assert to produce/assert multi-table (#5604)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/2c67cd8f3e"},"https://github.com/apache/seatunnel/commit/2c67cd8f3e")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve]"," Remove useless ReadonlyConfig flatten feature (#5612)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/243edfef3d"},"https://github.com/apache/seatunnel/commit/243edfef3d")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"Support config column/primaryKey/constraintKey in schema (#5564)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/eac76b4e50"},"https://github.com/apache/seatunnel/commit/eac76b4e50")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][connector-assert]","support ","'","DECIMAL","'"," type and fix ","'","Number","'"," type precision issue (#5479)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/d308e27733"},"https://github.com/apache/seatunnel/commit/d308e27733")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][CheckStyle]"," Remove useless ","'","SuppressWarnings","'"," annotation of checkstyle. (#5260)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/51c0d709ba"},"https://github.com/apache/seatunnel/commit/51c0d709ba")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Transform]"," Add SimpleSQL transform plugin (#4148)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/b914d49abf"},"https://github.com/apache/seatunnel/commit/b914d49abf")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][build]"," Give the maven module a human readable name (#4114)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/d7cd601051"},"https://github.com/apache/seatunnel/commit/d7cd601051")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Project]"," Code format with spotless plugin. (#4101)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/a2ab166561"},"https://github.com/apache/seatunnel/commit/a2ab166561")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Hotfix][OptionRule]"," Fix option rule about all connectors (#3592)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/226dc6a119"},"https://github.com/apache/seatunnel/commit/226dc6a119")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector-V2]","[Assert]"," Unified exception for assert connector (#3331)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/e74c9bc6fd"},"https://github.com/apache/seatunnel/commit/e74c9bc6fd")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[improve][connector]"," The Factory#factoryIdentifier must be consistent with PluginIdentifierInterface#getPluginName (#3328)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/d9519d696a"},"https://github.com/apache/seatunnel/commit/d9519d696a")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector-V2]"," Add Clickhouse and Assert Source/Sink Factory (#3306)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/9e4a128381"},"https://github.com/apache/seatunnel/commit/9e4a128381")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Connector-v2]"," improve assert sink connector (#2844)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/967fec0e93"},"https://github.com/apache/seatunnel/commit/967fec0e93")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[DEV][Api]"," Replace SeaTunnelContext with JobContext and remove singleton pattern (#2706)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/cbf82f755c"},"https://github.com/apache/seatunnel/commit/cbf82f755c")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[improve][UT]"," Upgrade junit to 5.+ (#2305)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/362319ff3e"},"https://github.com/apache/seatunnel/commit/362319ff3e")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[checkstyle]"," Improved validation scope of MagicNumber (#2194)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/6d08b5f369"},"https://github.com/apache/seatunnel/commit/6d08b5f369")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[API-DRAFT][MERGE]"," update license and pom.xml"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/5ae8865b7c"},"https://github.com/apache/seatunnel/commit/5ae8865b7c")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"add assert sink to Api draft (#2071)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/fc640b52bd"},"https://github.com/apache/seatunnel/commit/fc640b52bd")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta"))))))}d.isMDXComponent=!0},44863:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>g,default:()=>s,frontMatter:()=>i,metadata:()=>m,toc:()=>u});var a=n(58168),l=(n(96540),n(15680)),r=n(77662);const i={},g="Assert",m={unversionedId:"connector-v2/sink/Assert",id:"connector-v2/sink/Assert",title:"Assert",description:"Assert sink connector",source:"@site/docs/connector-v2/sink/Assert.md",sourceDirName:"connector-v2/sink",slug:"/connector-v2/sink/Assert",permalink:"/docs/connector-v2/sink/Assert",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/connector-v2/sink/Assert.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"AmazonSqs",permalink:"/docs/connector-v2/sink/AmazonSqs"},next:{title:"Cassandra",permalink:"/docs/connector-v2/sink/Cassandra"}},o={},u=[{value:"Description",id:"description",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Options",id:"options",level:2},{value:"rules ConfigMap",id:"rules-configmap",level:3},{value:"field_rules ConfigList",id:"field_rules-configlist",level:3},{value:"field_name string",id:"field_name-string",level:3},{value:"field_type string | ConfigMap",id:"field_type-string--configmap",level:3},{value:"field_value ConfigList",id:"field_value-configlist",level:3},{value:"rule_type string",id:"rule_type-string",level:3},{value:"rule_value numeric",id:"rule_value-numeric",level:3},{value:"equals_to boolean | numeric | string | ConfigList | ConfigMap",id:"equals_to-boolean--numeric--string--configlist--configmap",level:3},{value:"catalog_table_rule ConfigMap",id:"catalog_table_rule-configmap",level:3},{value:"table-names ConfigList",id:"table-names-configlist",level:3},{value:"tables_configs ConfigList",id:"tables_configs-configlist",level:3},{value:"table_path String",id:"table_path-string",level:3},{value:"common options",id:"common-options",level:3},{value:"Example",id:"example",level:2},{value:"Simple",id:"simple",level:3},{value:"Complex",id:"complex",level:3},{value:"Assert Multiple Tables",id:"assert-multiple-tables",level:3},{value:"Changelog",id:"changelog",level:2}],p={toc:u},d="wrapper";function s(e){let{components:t,...n}=e;return(0,l.yg)(d,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"assert"},"Assert"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Assert sink connector")),(0,l.yg)("h2",{id:"description"},"Description"),(0,l.yg)("p",null,"A sink plugin which can assert illegal data by user defined rules"),(0,l.yg)("h2",{id:"key-features"},"Key Features"),(0,l.yg)("ul",{className:"contains-task-list"},(0,l.yg)("li",{parentName:"ul",className:"task-list-item"},(0,l.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,l.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"exactly-once"))),(0,l.yg)("h2",{id:"options"},"Options"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Name"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Required"),(0,l.yg)("th",{parentName:"tr",align:null},"Default"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules"),(0,l.yg)("td",{parentName:"tr",align:null},"ConfigMap"),(0,l.yg)("td",{parentName:"tr",align:null},"yes"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.field_rules"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"yes"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.field_rules.field_name"),(0,l.yg)("td",{parentName:"tr",align:null},"string","|","ConfigMap"),(0,l.yg)("td",{parentName:"tr",align:null},"yes"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.field_rules.field_type"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.field_rules.field_value"),(0,l.yg)("td",{parentName:"tr",align:null},"ConfigList"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.field_rules.field_value.rule_type"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.field_rules.field_value.rule_value"),(0,l.yg)("td",{parentName:"tr",align:null},"numeric"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.field_rules.field_value.equals_to"),(0,l.yg)("td",{parentName:"tr",align:null},"boolean","|","numeric","|","string","|","ConfigList","|","ConfigMap"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.row_rules"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"yes"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.row_rules.rule_type"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.row_rules.rule_value"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule"),(0,l.yg)("td",{parentName:"tr",align:null},"ConfigMap"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.primary_key_rule"),(0,l.yg)("td",{parentName:"tr",align:null},"ConfigMap"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.primary_key_rule.primary_key_name"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.primary_key_rule.primary_key_columns"),(0,l.yg)("td",{parentName:"tr",align:null},"ConfigList"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.constraint_key_rule"),(0,l.yg)("td",{parentName:"tr",align:null},"ConfigList"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.constraint_key_rule.constraint_key_name"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.constraint_key_rule.constraint_key_type"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.constraint_key_rule.constraint_key_columns"),(0,l.yg)("td",{parentName:"tr",align:null},"ConfigList"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.constraint_key_rule.constraint_key_columns.constraint_key_column_name"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.constraint_key_rule.constraint_key_columns.constraint_key_sort_type"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.column_rule"),(0,l.yg)("td",{parentName:"tr",align:null},"ConfigList"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.column_rule.name"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.column_rule.type"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.column_rule.column_length"),(0,l.yg)("td",{parentName:"tr",align:null},"int"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.column_rule.nullable"),(0,l.yg)("td",{parentName:"tr",align:null},"boolean"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.column_rule.default_value"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.catalog_table_rule.column_rule.comment"),(0,l.yg)("td",{parentName:"tr",align:null},"comment"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.table-names"),(0,l.yg)("td",{parentName:"tr",align:null},"ConfigList"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.tables_configs"),(0,l.yg)("td",{parentName:"tr",align:null},"ConfigList"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rules.tables_configs.table_path"),(0,l.yg)("td",{parentName:"tr",align:null},"String"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"common-options"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-")))),(0,l.yg)("h3",{id:"rules-configmap"},"rules ","[ConfigMap]"),(0,l.yg)("p",null,"Rule definition of user's available data.  Each rule represents one field validation or row num validation."),(0,l.yg)("h3",{id:"field_rules-configlist"},"field_rules ","[ConfigList]"),(0,l.yg)("p",null,"field rules for field validation"),(0,l.yg)("h3",{id:"field_name-string"},"field_name ","[string]"),(0,l.yg)("p",null,"field name\uff08string\uff09"),(0,l.yg)("h3",{id:"field_type-string--configmap"},"field_type ","[string | ConfigMap]"),(0,l.yg)("p",null,"Field type declarations should adhere to this ",(0,l.yg)("a",{parentName:"p",href:"/docs/concept/schema-feature#how-to-declare-type-supported"},"guide"),"."),(0,l.yg)("h3",{id:"field_value-configlist"},"field_value ","[ConfigList]"),(0,l.yg)("p",null,"A list value rule define the data value validation"),(0,l.yg)("h3",{id:"rule_type-string"},"rule_type ","[string]"),(0,l.yg)("p",null,"The following rules are supported for now"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"NOT_NULL ",(0,l.yg)("inlineCode",{parentName:"li"},"value can't be null")),(0,l.yg)("li",{parentName:"ul"},"NULL ",(0,l.yg)("inlineCode",{parentName:"li"},"value can be null")),(0,l.yg)("li",{parentName:"ul"},"MIN ",(0,l.yg)("inlineCode",{parentName:"li"},"define the minimum value of data")),(0,l.yg)("li",{parentName:"ul"},"MAX ",(0,l.yg)("inlineCode",{parentName:"li"},"define the maximum value of data")),(0,l.yg)("li",{parentName:"ul"},"MIN_LENGTH ",(0,l.yg)("inlineCode",{parentName:"li"},"define the minimum string length of a string data")),(0,l.yg)("li",{parentName:"ul"},"MAX_LENGTH ",(0,l.yg)("inlineCode",{parentName:"li"},"define the maximum string length of a string data")),(0,l.yg)("li",{parentName:"ul"},"MIN_ROW ",(0,l.yg)("inlineCode",{parentName:"li"},"define the minimun number of rows")),(0,l.yg)("li",{parentName:"ul"},"MAX_ROW ",(0,l.yg)("inlineCode",{parentName:"li"},"define the maximum number of rows"))),(0,l.yg)("h3",{id:"rule_value-numeric"},"rule_value ","[numeric]"),(0,l.yg)("p",null,"The value related to rule type. When the ",(0,l.yg)("inlineCode",{parentName:"p"},"rule_type")," is ",(0,l.yg)("inlineCode",{parentName:"p"},"MIN"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"MAX"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"MIN_LENGTH"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"MAX_LENGTH"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"MIN_ROW")," or ",(0,l.yg)("inlineCode",{parentName:"p"},"MAX_ROW"),", users need to assign a value to the ",(0,l.yg)("inlineCode",{parentName:"p"},"rule_value"),"."),(0,l.yg)("h3",{id:"equals_to-boolean--numeric--string--configlist--configmap"},"equals_to ","[boolean | numeric | string | ConfigList | ConfigMap]"),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"equals_to")," is used to compare whether the field value is equal to the configured expected value. You can assign values of all types to ",(0,l.yg)("inlineCode",{parentName:"p"},"equals_to"),". These types are detailed ",(0,l.yg)("a",{parentName:"p",href:"/docs/concept/schema-feature#what-type-supported-at-now"},"here"),". For instance, if one field is a row with three fields, and the declaration of row type is ",(0,l.yg)("inlineCode",{parentName:"p"},"{a = array<string>, b = map<string, decimal(30, 2)>, c={c_0 = int, b = string}}"),", users can assign the value ",(0,l.yg)("inlineCode",{parentName:"p"},'[["a", "b"], { k0 = 9999.99, k1 = 111.11 }, [123, "abcd"]]')," to ",(0,l.yg)("inlineCode",{parentName:"p"},"equals_to"),"."),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"The way of defining field values is consistent with ",(0,l.yg)("a",{parentName:"p",href:"/docs/connector-v2/source/FakeSource#customize-the-data-content-simple"},"FakeSource"),"."),(0,l.yg)("p",{parentName:"blockquote"},(0,l.yg)("inlineCode",{parentName:"p"},"equals_to")," cannot be applied to ",(0,l.yg)("inlineCode",{parentName:"p"},"null")," type fields. However, users can use the rule type ",(0,l.yg)("inlineCode",{parentName:"p"},"NULL")," for verification, such as ",(0,l.yg)("inlineCode",{parentName:"p"},"{rule_type = NULL}"),".")),(0,l.yg)("h3",{id:"catalog_table_rule-configmap"},"catalog_table_rule ","[ConfigMap]"),(0,l.yg)("p",null,"Used to assert the catalog table is same with the user defined table."),(0,l.yg)("h3",{id:"table-names-configlist"},"table-names ","[ConfigList]"),(0,l.yg)("p",null,"Used to assert the table should be in the data."),(0,l.yg)("h3",{id:"tables_configs-configlist"},"tables_configs ","[ConfigList]"),(0,l.yg)("p",null,"Used to assert the multiple tables should be in the data."),(0,l.yg)("h3",{id:"table_path-string"},"table_path ","[String]"),(0,l.yg)("p",null,"The path of the table."),(0,l.yg)("h3",{id:"common-options"},"common options"),(0,l.yg)("p",null,"Sink plugin common parameters, please refer to ",(0,l.yg)("a",{parentName:"p",href:"/docs/connector-v2/sink-common-options"},"Sink Common Options")," for details"),(0,l.yg)("h2",{id:"example"},"Example"),(0,l.yg)("h3",{id:"simple"},"Simple"),(0,l.yg)("p",null,"the whole config obey with ",(0,l.yg)("inlineCode",{parentName:"p"},"hocon")," style"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'Assert {\n    rules =\n      {\n        row_rules = [\n          {\n            rule_type = MAX_ROW\n            rule_value = 10\n          },\n          {\n            rule_type = MIN_ROW\n            rule_value = 5\n          }\n        ],\n        field_rules = [{\n          field_name = name\n          field_type = string\n          field_value = [\n            {\n              rule_type = NOT_NULL\n            },\n            {\n              rule_type = MIN_LENGTH\n              rule_value = 5\n            },\n            {\n              rule_type = MAX_LENGTH\n              rule_value = 10\n            }\n          ]\n        }, {\n          field_name = age\n          field_type = int\n          field_value = [\n            {\n              rule_type = NOT_NULL\n              equals_to = 23\n            },\n            {\n              rule_type = MIN\n              rule_value = 32767\n            },\n            {\n              rule_type = MAX\n              rule_value = 2147483647\n            }\n          ]\n        }\n        ]\n        catalog_table_rule {\n            primary_key_rule = {\n                primary_key_name = "primary key"\n                primary_key_columns = ["id"]\n            }\n            constraint_key_rule = [\n                        {\n                        constraint_key_name = "unique_name"\n                        constraint_key_type = UNIQUE_KEY\n                        constraint_key_columns = [\n                            {\n                                constraint_key_column_name = "id"\n                                constraint_key_sort_type = ASC\n                            }\n                        ]\n                        }\n            ]\n            column_rule = [\n               {\n                name = "id"\n                type = bigint\n               },\n              {\n                name = "name"\n                type = string\n              },\n              {\n                name = "age"\n                type = int\n              }\n            ]\n        }\n      }\n\n  }\n')),(0,l.yg)("h3",{id:"complex"},"Complex"),(0,l.yg)("p",null,"Here is a more complex example about ",(0,l.yg)("inlineCode",{parentName:"p"},"equals_to"),". The example involves FakeSource. You may want to learn it, please read this ",(0,l.yg)("a",{parentName:"p",href:"/docs/connector-v2/source/FakeSource"},"document"),"."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'source {\n  FakeSource {\n    row.num = 1\n    schema = {\n      fields {\n        c_null = "null"\n        c_string = string\n        c_boolean = boolean\n        c_tinyint = tinyint\n        c_smallint = smallint\n        c_int = int\n        c_bigint = bigint\n        c_float = float\n        c_double = double\n        c_decimal = "decimal(30, 8)"\n        c_date = date\n        c_timestamp = timestamp\n        c_time = time\n        c_bytes = bytes\n        c_array = "array<int>"\n        c_map = "map<time, string>"\n        c_map_nest = "map<string, {c_int = int, c_string = string}>"\n        c_row = {\n          c_null = "null"\n          c_string = string\n          c_boolean = boolean\n          c_tinyint = tinyint\n          c_smallint = smallint\n          c_int = int\n          c_bigint = bigint\n          c_float = float\n          c_double = double\n          c_decimal = "decimal(30, 8)"\n          c_date = date\n          c_timestamp = timestamp\n          c_time = time\n          c_bytes = bytes\n          c_array = "array<int>"\n          c_map = "map<string, string>"\n        }\n      }\n    }\n    rows = [\n      {\n        kind = INSERT\n        fields = [\n          null, "AAA", false, 1, 1, 333, 323232, 3.1, 9.33333, 99999.99999999, "2012-12-21", "2012-12-21T12:34:56", "12:34:56",\n          "bWlJWmo=",\n          [0, 1, 2],\n          "{ 12:01:26 = v0 }",\n          { k1 = [123, "BBB-BB"]},\n          [\n            null, "AAA", false, 1, 1, 333, 323232, 3.1, 9.33333, 99999.99999999, "2012-12-21", "2012-12-21T12:34:56", "12:34:56",\n            "bWlJWmo=",\n            [0, 1, 2],\n            { k0 = v0 }\n          ]\n        ]\n      }\n    ]\n    plugin_output = "fake"\n  }\n}\n\nsink{\n  Assert {\n    plugin_input = "fake"\n    rules =\n      {\n        row_rules = [\n          {\n            rule_type = MAX_ROW\n            rule_value = 1\n          },\n          {\n            rule_type = MIN_ROW\n            rule_value = 1\n          }\n        ],\n        field_rules = [\n            {\n                field_name = c_null\n                field_type = "null"\n                field_value = [\n                    {\n                        rule_type = NULL\n                    }\n                ]\n            },\n            {\n                field_name = c_string\n                field_type = string\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = "AAA"\n                    }\n                ]\n            },\n            {\n                field_name = c_boolean\n                field_type = boolean\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = false\n                    }\n                ]\n            },\n            {\n                field_name = c_tinyint\n                field_type = tinyint\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = 1\n                    }\n                ]\n            },\n            {\n                field_name = c_smallint\n                field_type = smallint\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = 1\n                    }\n                ]\n            },\n            {\n                field_name = c_int\n                field_type = int\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = 333\n                    }\n                ]\n            },\n            {\n                field_name = c_bigint\n                field_type = bigint\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = 323232\n                    }\n                ]\n            },\n            {\n                field_name = c_float\n                field_type = float\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = 3.1\n                    }\n                ]\n            },\n            {\n                field_name = c_double\n                field_type = double\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = 9.33333\n                    }\n                ]\n            },\n            {\n                field_name = c_decimal\n                field_type = "decimal(30, 8)"\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = 99999.99999999\n                    }\n                ]\n            },\n            {\n                field_name = c_date\n                field_type = date\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = "2012-12-21"\n                    }\n                ]\n            },\n            {\n                field_name = c_timestamp\n                field_type = timestamp\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = "2012-12-21T12:34:56"\n                    }\n                ]\n            },\n            {\n                field_name = c_time\n                field_type = time\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = "12:34:56"\n                    }\n                ]\n            },\n            {\n                field_name = c_bytes\n                field_type = bytes\n                field_value = [\n                      {\n                          rule_type = NOT_NULL\n                          equals_to = "bWlJWmo="\n                      }\n                ]\n            },\n            {\n                field_name = c_array\n                field_type = "array<int>"\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = [0, 1, 2]\n                    }\n                ]\n            },\n            {\n                field_name = c_map\n                field_type = "map<time, string>"\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = "{ 12:01:26 = v0 }"\n                    }\n                ]\n            },\n            {\n                field_name = c_map_nest\n                field_type = "map<string, {c_int = int, c_string = string}>"\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = { k1 = [123, "BBB-BB"] }\n                    }\n                ]\n            },\n            {\n                field_name = c_row\n                field_type = {\n                    c_null = "null"\n                    c_string = string\n                    c_boolean = boolean\n                    c_tinyint = tinyint\n                    c_smallint = smallint\n                    c_int = int\n                    c_bigint = bigint\n                    c_float = float\n                    c_double = double\n                    c_decimal = "decimal(30, 8)"\n                    c_date = date\n                    c_timestamp = timestamp\n                    c_time = time\n                    c_bytes = bytes\n                    c_array = "array<int>"\n                    c_map = "map<string, string>"\n                }\n                field_value = [\n                    {\n                        rule_type = NOT_NULL\n                        equals_to = [\n                           null, "AAA", false, 1, 1, 333, 323232, 3.1, 9.33333, 99999.99999999, "2012-12-21", "2012-12-21T12:34:56", "12:34:56",\n                           "bWlJWmo=",\n                           [0, 1, 2],\n                           { k0 = v0 }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n  }\n}\n')),(0,l.yg)("h3",{id:"assert-multiple-tables"},"Assert Multiple Tables"),(0,l.yg)("p",null,"check multiple tables"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'env {\n  parallelism = 1\n  job.mode = BATCH\n}\n\nsource {\n  FakeSource {\n    tables_configs = [\n      {\n        row.num = 16\n        schema {\n          table = "test.table1"\n          fields {\n            c_int = int\n            c_bigint = bigint\n          }\n        }\n      },\n      {\n        row.num = 17\n        schema {\n          table = "test.table2"\n          fields {\n            c_string = string\n            c_tinyint = tinyint\n          }\n        }\n      }\n    ]\n  }\n}\n\ntransform {\n}\n\nsink {\n  Assert {\n    rules =\n      {\n        tables_configs = [\n          {\n            table_path = "test.table1"\n            row_rules = [\n              {\n                rule_type = MAX_ROW\n                rule_value = 16\n              },\n              {\n                rule_type = MIN_ROW\n                rule_value = 16\n              }\n            ],\n            field_rules = [{\n              field_name = c_int\n              field_type = int\n              field_value = [\n                {\n                  rule_type = NOT_NULL\n                }\n              ]\n            }, {\n              field_name = c_bigint\n              field_type = bigint\n              field_value = [\n                {\n                  rule_type = NOT_NULL\n                }\n              ]\n            }]\n          },\n          {\n            table_path = "test.table2"\n            row_rules = [\n              {\n                rule_type = MAX_ROW\n                rule_value = 17\n              },\n              {\n                rule_type = MIN_ROW\n                rule_value = 17\n              }\n            ],\n            field_rules = [{\n              field_name = c_string\n              field_type = string\n              field_value = [\n                {\n                  rule_type = NOT_NULL\n                }\n              ]\n            }, {\n              field_name = c_tinyint\n              field_type = tinyint\n              field_value = [\n                {\n                  rule_type = NOT_NULL\n                }\n              ]\n            }]\n          }\n        ]\n\n      }\n  }\n}\n\n')),(0,l.yg)("h2",{id:"changelog"},"Changelog"),(0,l.yg)(r.default,{mdxType:"ChangeLog"}))}s.isMDXComponent=!0}}]);