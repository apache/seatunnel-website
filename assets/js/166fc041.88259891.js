"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[58254,92851],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>y});var a=n(96540);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var m=a.createContext({}),g=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=g(e.components);return a.createElement(m.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,m=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=g(n),u=l,y=c["".concat(m,".").concat(u)]||c[u]||d[u]||r;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=u;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[c]="string"==typeof e?e:l,i[1]=o;for(var g=2;g<r;g++)i[g]=n[g];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},47009:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>g});var a=n(58168),l=(n(96540),n(15680));const r={},i=void 0,o={unversionedId:"connector-v2/changelog/connector-fake",id:"connector-v2/changelog/connector-fake",title:"connector-fake",description:"Change Log",source:"@site/docs/connector-v2/changelog/connector-fake.md",sourceDirName:"connector-v2/changelog",slug:"/connector-v2/changelog/connector-fake",permalink:"/docs/connector-v2/changelog/connector-fake",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/connector-v2/changelog/connector-fake.md",tags:[],version:"current",frontMatter:{}},m={},g=[],p={toc:g},c="wrapper";function d(e){let{components:t,...n}=e;return(0,l.yg)(c,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("details",null,(0,l.yg)("summary",null," Change Log "),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Change"),(0,l.yg)("th",{parentName:"tr",align:null},"Commit"),(0,l.yg)("th",{parentName:"tr",align:null},"Version"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve]"," restruct connector common options (#8634)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/f3499a6eeb"},"https://github.com/apache/seatunnel/commit/f3499a6eeb")),(0,l.yg)("td",{parentName:"tr",align:null},"dev")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][API]"," Support timestamp with timezone offset (#8367)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/e18bfeabd2"},"https://github.com/apache/seatunnel/commit/e18bfeabd2")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][dist]","add shade check rule (#8136)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/51ef800016"},"https://github.com/apache/seatunnel/commit/51ef800016")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][API]"," Unified tables_configs and table_list (#8100)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/84c0b8d660"},"https://github.com/apache/seatunnel/commit/84c0b8d660")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Core]"," Rename ",(0,l.yg)("inlineCode",{parentName:"td"},"result_table_name"),"/",(0,l.yg)("inlineCode",{parentName:"td"},"source_table_name")," to ",(0,l.yg)("inlineCode",{parentName:"td"},"plugin_input/plugin_output")," (#8072)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/c7bbd322db"},"https://github.com/apache/seatunnel/commit/c7bbd322db")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Fake]"," Improve memory usage when split size is large (#7821)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/2d41b024c7"},"https://github.com/apache/seatunnel/commit/2d41b024c7")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.9")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector-V2]"," Time supports default value (#7639)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/33978689f5"},"https://github.com/apache/seatunnel/commit/33978689f5")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.8")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector-V2]"," Fake supports column configuration (#7503)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/39162a4e0b"},"https://github.com/apache/seatunnel/commit/39162a4e0b")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.8")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Core]"," Add event notify for all connector (#7501)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/d71337b0e9"},"https://github.com/apache/seatunnel/commit/d71337b0e9")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.8")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector-V2]"," update vectorType (#7446)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/1bba72385b"},"https://github.com/apache/seatunnel/commit/1bba72385b")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.8")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Connector-V2]"," Fake Source support produce vector data (#7401)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/6937d10ac3"},"https://github.com/apache/seatunnel/commit/6937d10ac3")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.8")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Kafka]"," Support multi-table source read  (#5992)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/60104602d1"},"https://github.com/apache/seatunnel/commit/60104602d1")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.6")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Doris]"," Add Doris type converter (#6354)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/5189991843"},"https://github.com/apache/seatunnel/commit/5189991843")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.6")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Core]"," Support event listener for job (#6419)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/831d0022eb"},"https://github.com/apache/seatunnel/commit/831d0022eb")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.5")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Fix][FakeSource]"," fix random from template not include the latest value issue (#6438)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/6ec16ac46f"},"https://github.com/apache/seatunnel/commit/6ec16ac46f")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.5")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Catalog]"," Use default tablepath when can not get the tablepath from source config (#6276)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/f8158bb805"},"https://github.com/apache/seatunnel/commit/f8158bb805")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector-V2]"," Replace CommonErrorCodeDeprecated.JSON_OPERATION_FAILED (#5978)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/456cd17714"},"https://github.com/apache/seatunnel/commit/456cd17714")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"FakeSource support generate different CatalogTable for MultipleTable (#5766)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/a8b93805ea"},"https://github.com/apache/seatunnel/commit/a8b93805ea")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Common]"," Introduce new error define rule (#5793)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/9d1b2582b2"},"https://github.com/apache/seatunnel/commit/9d1b2582b2")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve]"," Add default implement for ",(0,l.yg)("inlineCode",{parentName:"td"},"SeaTunnelSource::getProducedType")," (#5670)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/a04add6991"},"https://github.com/apache/seatunnel/commit/a04add6991")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"Support config tableIdentifier for schema (#5628)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/652921fb75"},"https://github.com/apache/seatunnel/commit/652921fb75")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature]"," Add ",(0,l.yg)("inlineCode",{parentName:"td"},"table-names")," from FakeSource/Assert to produce/assert multi-table (#5604)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/2c67cd8f3e"},"https://github.com/apache/seatunnel/commit/2c67cd8f3e")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"Support config column/primaryKey/constraintKey in schema (#5564)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/eac76b4e50"},"https://github.com/apache/seatunnel/commit/eac76b4e50")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][CheckStyle]"," Remove useless ","'","SuppressWarnings","'"," annotation of checkstyle. (#5260)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/51c0d709ba"},"https://github.com/apache/seatunnel/commit/51c0d709ba")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.4")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[improve][zeta]"," fix zeta bugs"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/3a82e8b39f"},"https://github.com/apache/seatunnel/commit/3a82e8b39f")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[chore]"," Code format with spotless plugin."),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/291214ad6f"},"https://github.com/apache/seatunnel/commit/291214ad6f")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"Merge branch ","'","dev","'"," into merge/cdc"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/4324ee1912"},"https://github.com/apache/seatunnel/commit/4324ee1912")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Project]"," Code format with spotless plugin."),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/423b583038"},"https://github.com/apache/seatunnel/commit/423b583038")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[improve][api]"," Refactoring schema parse (#4157)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/b2f573a13e"},"https://github.com/apache/seatunnel/commit/b2f573a13e")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][build]"," Give the maven module a human readable name (#4114)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/d7cd601051"},"https://github.com/apache/seatunnel/commit/d7cd601051")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Project]"," Code format with spotless plugin. (#4101)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/a2ab166561"},"https://github.com/apache/seatunnel/commit/a2ab166561")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector-fake]"," Optimizing Data Generation Strategies refer to #4004 (#4061)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/c7c596a6dc"},"https://github.com/apache/seatunnel/commit/c7c596a6dc")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector-V2]","[Fake]"," Improve fake connector (#3932)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/31f12431d9"},"https://github.com/apache/seatunnel/commit/31f12431d9")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Connector-v2]","[StarRocks]"," Support write cdc changelog event(INSERT/UPDATE/DELETE) (#3865)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/8e3d158c03"},"https://github.com/apache/seatunnel/commit/8e3d158c03")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Connector]"," add get source method to all source connector (#3846)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/417178fb84"},"https://github.com/apache/seatunnel/commit/417178fb84")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][API &amp; Connector &amp; Doc]"," add parallelism and column projection interface (#3829)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/b9164b8ba1"},"https://github.com/apache/seatunnel/commit/b9164b8ba1")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Hotfix][OptionRule]"," Fix option rule about all connectors (#3592)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/226dc6a119"},"https://github.com/apache/seatunnel/commit/226dc6a119")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector-V2]","[Fake]"," Unified exception for fake source connector (#3520)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/f371ad5825"},"https://github.com/apache/seatunnel/commit/f371ad5825")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Connector-V2][Fake]"," Add Fake TableSourceFactory (#3345)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/74b61c33a0"},"https://github.com/apache/seatunnel/commit/74b61c33a0")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Connector-V2][ElasticSearch]"," Add ElasticSearch Source/Sink Factory (#3325)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/38254e3f26"},"https://github.com/apache/seatunnel/commit/38254e3f26")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Engine]"," Improve Engine performance. (#3216)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/7393c47327"},"https://github.com/apache/seatunnel/commit/7393c47327")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[hotfix][connector]","[fake]"," fix FakeSourceSplitEnumerator assigning duplicate splits when restoring (#3112)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/98b1feda85"},"https://github.com/apache/seatunnel/commit/98b1feda85")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[improve][connector]","[fake]"," supports setting the number of split rows and reading interval (#3098)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/efabe6af7f"},"https://github.com/apache/seatunnel/commit/efabe6af7f")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[feature][connector]","[fake]"," Support mutil splits for fake source connector (#2974)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/c28c44b7c9"},"https://github.com/apache/seatunnel/commit/c28c44b7c9")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[E2E][ST-Engine]"," Add test data consistency in 3 node cluster and fix bug (#3038)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/97400a6f13"},"https://github.com/apache/seatunnel/commit/97400a6f13")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][all]"," change Log to @Slf4j (#3001)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/6016100f12"},"https://github.com/apache/seatunnel/commit/6016100f12")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector-V2]"," Improve fake source connector (#2944)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/044f62ef32"},"https://github.com/apache/seatunnel/commit/044f62ef32")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Improve][Connector-v2-Fake]","Supports direct definition of data values(row) (#2839)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/b7d9dde6c8"},"https://github.com/apache/seatunnel/commit/b7d9dde6c8")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Connector-V2][ElasticSearch]"," Fix ElasticSearch Connector V2 Bug (#2817)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/2fcbbf464a"},"https://github.com/apache/seatunnel/commit/2fcbbf464a")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[DEV][Api]"," Replace SeaTunnelContext with JobContext and remove singleton pattern (#2706)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/cbf82f755c"},"https://github.com/apache/seatunnel/commit/cbf82f755c")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Bug][connector-fake]"," Fake date calculation error(#2573)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/9ea01298f1"},"https://github.com/apache/seatunnel/commit/9ea01298f1")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Bug][ConsoleSinkV2]","fix fieldToString StackOverflow and add Unit-Test (#2545)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/6f87094569"},"https://github.com/apache/seatunnel/commit/6f87094569")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[chore][connector-common]"," Rename SeatunnelSchema to SeaTunnelSchema (#2538)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/7dc2a27388"},"https://github.com/apache/seatunnel/commit/7dc2a27388")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Imporve][Fake-Connector-V2]","support user-defined-schmea and random data for fake-table  (#2406)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/a5447528c3"},"https://github.com/apache/seatunnel/commit/a5447528c3")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[api-draft][Optimize]"," Optimize module name (#2062)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/f79e3112b1"},"https://github.com/apache/seatunnel/commit/f79e3112b1")),(0,l.yg)("td",{parentName:"tr",align:null},"2.2.0-beta"))))))}d.isMDXComponent=!0},3235:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>m,toc:()=>p});var a=n(58168),l=(n(96540),n(15680)),r=n(47009);const i={},o="FakeSource",m={unversionedId:"connector-v2/source/FakeSource",id:"connector-v2/source/FakeSource",title:"FakeSource",description:"FakeSource connector",source:"@site/docs/connector-v2/source/FakeSource.md",sourceDirName:"connector-v2/source",slug:"/connector-v2/source/FakeSource",permalink:"/docs/connector-v2/source/FakeSource",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/connector-v2/source/FakeSource.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Elasticsearch",permalink:"/docs/connector-v2/source/Elasticsearch"},next:{title:"FtpFile",permalink:"/docs/connector-v2/source/FtpFile"}},g={},p=[{value:"Support Those Engines",id:"support-those-engines",level:2},{value:"Description",id:"description",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Source Options",id:"source-options",level:2},{value:"Task Example",id:"task-example",level:2},{value:"Simple:",id:"simple",level:3},{value:"Random Generation",id:"random-generation",level:3},{value:"Customize the data content Simple:",id:"customize-the-data-content-simple",level:3},{value:"Specified Data number Simple:",id:"specified-data-number-simple",level:3},{value:"Template data Simple:",id:"template-data-simple",level:3},{value:"Range data Simple:",id:"range-data-simple",level:3},{value:"Generate Multiple tables",id:"generate-multiple-tables",level:3},{value:"Options <code>rows</code> Case",id:"options-rows-case",level:3},{value:"Options <code>table-names</code> Case",id:"options-table-names-case",level:3},{value:"Options <code>defaultValue</code> Case",id:"options-defaultvalue-case",level:3},{value:"Use Vector Example",id:"use-vector-example",level:3},{value:"Changelog",id:"changelog",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,l.yg)(d,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"fakesource"},"FakeSource"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"FakeSource connector")),(0,l.yg)("h2",{id:"support-those-engines"},"Support Those Engines"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Spark",(0,l.yg)("br",null),"\nFlink",(0,l.yg)("br",null),"\nSeaTunnel Zeta",(0,l.yg)("br",null))),(0,l.yg)("h2",{id:"description"},"Description"),(0,l.yg)("p",null,"The FakeSource is a virtual data source, which randomly generates the number of rows according to the data structure of the user-defined schema,\njust for some test cases such as type conversion or connector new feature testing"),(0,l.yg)("h2",{id:"key-features"},"Key Features"),(0,l.yg)("ul",{className:"contains-task-list"},(0,l.yg)("li",{parentName:"ul",className:"task-list-item"},(0,l.yg)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,l.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"batch")),(0,l.yg)("li",{parentName:"ul",className:"task-list-item"},(0,l.yg)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,l.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"stream")),(0,l.yg)("li",{parentName:"ul",className:"task-list-item"},(0,l.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,l.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"exactly-once")),(0,l.yg)("li",{parentName:"ul",className:"task-list-item"},(0,l.yg)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,l.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"column projection")),(0,l.yg)("li",{parentName:"ul",className:"task-list-item"},(0,l.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,l.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"parallelism")),(0,l.yg)("li",{parentName:"ul",className:"task-list-item"},(0,l.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,l.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"support user-defined split"))),(0,l.yg)("h2",{id:"source-options"},"Source Options"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Name"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Required"),(0,l.yg)("th",{parentName:"tr",align:null},"Default"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"tables_configs"),(0,l.yg)("td",{parentName:"tr",align:null},"list"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"Define Multiple FakeSource, each item can contains the whole fake source config description below")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"schema"),(0,l.yg)("td",{parentName:"tr",align:null},"config"),(0,l.yg)("td",{parentName:"tr",align:null},"yes"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"Define Schema information")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"rows"),(0,l.yg)("td",{parentName:"tr",align:null},"config"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"The row list of fake data output per degree of parallelism see title ",(0,l.yg)("inlineCode",{parentName:"td"},"Options rows Case"),".")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"row.num"),(0,l.yg)("td",{parentName:"tr",align:null},"int"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"5"),(0,l.yg)("td",{parentName:"tr",align:null},"The total number of data generated per degree of parallelism")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"split.num"),(0,l.yg)("td",{parentName:"tr",align:null},"int"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"1"),(0,l.yg)("td",{parentName:"tr",align:null},"the number of splits generated by the enumerator for each degree of parallelism")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"split.read-interval"),(0,l.yg)("td",{parentName:"tr",align:null},"long"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"1"),(0,l.yg)("td",{parentName:"tr",align:null},"The interval(mills) between two split reads in a reader")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"map.size"),(0,l.yg)("td",{parentName:"tr",align:null},"int"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"5"),(0,l.yg)("td",{parentName:"tr",align:null},"The size of ",(0,l.yg)("inlineCode",{parentName:"td"},"map")," type that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"array.size"),(0,l.yg)("td",{parentName:"tr",align:null},"int"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"5"),(0,l.yg)("td",{parentName:"tr",align:null},"The size of ",(0,l.yg)("inlineCode",{parentName:"td"},"array")," type that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"bytes.length"),(0,l.yg)("td",{parentName:"tr",align:null},"int"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"5"),(0,l.yg)("td",{parentName:"tr",align:null},"The length of ",(0,l.yg)("inlineCode",{parentName:"td"},"bytes")," type that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"string.length"),(0,l.yg)("td",{parentName:"tr",align:null},"int"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"5"),(0,l.yg)("td",{parentName:"tr",align:null},"The length of ",(0,l.yg)("inlineCode",{parentName:"td"},"string")," type that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"string.fake.mode"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"range"),(0,l.yg)("td",{parentName:"tr",align:null},"The fake mode of generating string data, support ",(0,l.yg)("inlineCode",{parentName:"td"},"range")," and ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", default ",(0,l.yg)("inlineCode",{parentName:"td"},"range"),"\uff0cif use configured it to ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", user should also configured ",(0,l.yg)("inlineCode",{parentName:"td"},"string.template")," option")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"string.template"),(0,l.yg)("td",{parentName:"tr",align:null},"list"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"The template list of string type that connector generated, if user configured it, connector will randomly select an item from the template list")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"tinyint.fake.mode"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"range"),(0,l.yg)("td",{parentName:"tr",align:null},"The fake mode of generating tinyint data, support ",(0,l.yg)("inlineCode",{parentName:"td"},"range")," and ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", default ",(0,l.yg)("inlineCode",{parentName:"td"},"range"),"\uff0cif use configured it to ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", user should also configured ",(0,l.yg)("inlineCode",{parentName:"td"},"tinyint.template")," option")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"tinyint.min"),(0,l.yg)("td",{parentName:"tr",align:null},"tinyint"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0"),(0,l.yg)("td",{parentName:"tr",align:null},"The min value of tinyint data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"tinyint.max"),(0,l.yg)("td",{parentName:"tr",align:null},"tinyint"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"127"),(0,l.yg)("td",{parentName:"tr",align:null},"The max value of tinyint data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"tinyint.template"),(0,l.yg)("td",{parentName:"tr",align:null},"list"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"The template list of tinyint type that connector generated, if user configured it, connector will randomly select an item from the template list")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"smallint.fake.mode"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"range"),(0,l.yg)("td",{parentName:"tr",align:null},"The fake mode of generating smallint data, support ",(0,l.yg)("inlineCode",{parentName:"td"},"range")," and ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", default ",(0,l.yg)("inlineCode",{parentName:"td"},"range"),"\uff0cif use configured it to ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", user should also configured ",(0,l.yg)("inlineCode",{parentName:"td"},"smallint.template")," option")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"smallint.min"),(0,l.yg)("td",{parentName:"tr",align:null},"smallint"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0"),(0,l.yg)("td",{parentName:"tr",align:null},"The min value of smallint data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"smallint.max"),(0,l.yg)("td",{parentName:"tr",align:null},"smallint"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"32767"),(0,l.yg)("td",{parentName:"tr",align:null},"The max value of smallint data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"smallint.template"),(0,l.yg)("td",{parentName:"tr",align:null},"list"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"The template list of smallint type that connector generated, if user configured it, connector will randomly select an item from the template list")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"int.fake.template"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"range"),(0,l.yg)("td",{parentName:"tr",align:null},"The fake mode of generating int data, support ",(0,l.yg)("inlineCode",{parentName:"td"},"range")," and ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", default ",(0,l.yg)("inlineCode",{parentName:"td"},"range"),"\uff0cif use configured it to ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", user should also configured ",(0,l.yg)("inlineCode",{parentName:"td"},"int.template")," option")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"int.min"),(0,l.yg)("td",{parentName:"tr",align:null},"int"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0"),(0,l.yg)("td",{parentName:"tr",align:null},"The min value of int data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"int.max"),(0,l.yg)("td",{parentName:"tr",align:null},"int"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0x7fffffff"),(0,l.yg)("td",{parentName:"tr",align:null},"The max value of int data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"int.template"),(0,l.yg)("td",{parentName:"tr",align:null},"list"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"The template list of int type that connector generated, if user configured it, connector will randomly select an item from the template list")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"bigint.fake.mode"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"range"),(0,l.yg)("td",{parentName:"tr",align:null},"The fake mode of generating bigint data, support ",(0,l.yg)("inlineCode",{parentName:"td"},"range")," and ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", default ",(0,l.yg)("inlineCode",{parentName:"td"},"range"),"\uff0cif use configured it to ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", user should also configured ",(0,l.yg)("inlineCode",{parentName:"td"},"bigint.template")," option")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"bigint.min"),(0,l.yg)("td",{parentName:"tr",align:null},"bigint"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0"),(0,l.yg)("td",{parentName:"tr",align:null},"The min value of bigint data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"bigint.max"),(0,l.yg)("td",{parentName:"tr",align:null},"bigint"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0x7fffffffffffffff"),(0,l.yg)("td",{parentName:"tr",align:null},"The max value of bigint data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"bigint.template"),(0,l.yg)("td",{parentName:"tr",align:null},"list"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"The template list of bigint type that connector generated, if user configured it, connector will randomly select an item from the template list")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"float.fake.mode"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"range"),(0,l.yg)("td",{parentName:"tr",align:null},"The fake mode of generating float data, support ",(0,l.yg)("inlineCode",{parentName:"td"},"range")," and ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", default ",(0,l.yg)("inlineCode",{parentName:"td"},"range"),"\uff0cif use configured it to ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", user should also configured ",(0,l.yg)("inlineCode",{parentName:"td"},"float.template")," option")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"float.min"),(0,l.yg)("td",{parentName:"tr",align:null},"float"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0"),(0,l.yg)("td",{parentName:"tr",align:null},"The min value of float data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"float.max"),(0,l.yg)("td",{parentName:"tr",align:null},"float"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0x1.fffffeP+127"),(0,l.yg)("td",{parentName:"tr",align:null},"The max value of float data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"float.template"),(0,l.yg)("td",{parentName:"tr",align:null},"list"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"The template list of float type that connector generated, if user configured it, connector will randomly select an item from the template list")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"double.fake.mode"),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"range"),(0,l.yg)("td",{parentName:"tr",align:null},"The fake mode of generating float data, support ",(0,l.yg)("inlineCode",{parentName:"td"},"range")," and ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", default ",(0,l.yg)("inlineCode",{parentName:"td"},"range"),"\uff0cif use configured it to ",(0,l.yg)("inlineCode",{parentName:"td"},"template"),", user should also configured ",(0,l.yg)("inlineCode",{parentName:"td"},"double.template")," option")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"double.min"),(0,l.yg)("td",{parentName:"tr",align:null},"double"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0"),(0,l.yg)("td",{parentName:"tr",align:null},"The min value of double data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"double.max"),(0,l.yg)("td",{parentName:"tr",align:null},"double"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0x1.fffffffffffffP+1023"),(0,l.yg)("td",{parentName:"tr",align:null},"The max value of double data that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"double.template"),(0,l.yg)("td",{parentName:"tr",align:null},"list"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"The template list of double type that connector generated, if user configured it, connector will randomly select an item from the template list")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"vector.dimension"),(0,l.yg)("td",{parentName:"tr",align:null},"int"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"4"),(0,l.yg)("td",{parentName:"tr",align:null},"Dimension of the generated vector, excluding binary vectors")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"binary.vector.dimension"),(0,l.yg)("td",{parentName:"tr",align:null},"int"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"8"),(0,l.yg)("td",{parentName:"tr",align:null},"Dimension of the generated binary vector")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"vector.float.min"),(0,l.yg)("td",{parentName:"tr",align:null},"float"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0"),(0,l.yg)("td",{parentName:"tr",align:null},"The min value of float data in vector that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"vector.float.max"),(0,l.yg)("td",{parentName:"tr",align:null},"float"),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"0x1.fffffeP+127"),(0,l.yg)("td",{parentName:"tr",align:null},"The max value of float data in vector that connector generated")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"common-options"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},"no"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"Source plugin common parameters, please refer to ",(0,l.yg)("a",{parentName:"td",href:"/docs/connector-v2/source-common-options"},"Source Common Options")," for details")))),(0,l.yg)("h2",{id:"task-example"},"Task Example"),(0,l.yg)("h3",{id:"simple"},"Simple:"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"This example Randomly generates data of a specified type. If you want to learn how to declare field types, click ",(0,l.yg)("a",{parentName:"p",href:"/docs/concept/schema-feature#how-to-declare-type-supported"},"here"),".")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'schema = {\n  fields {\n    c_map = "map<string, array<int>>"\n    c_map_nest = "map<string, {c_int = int, c_string = string}>"\n    c_array = "array<int>"\n    c_string = string\n    c_boolean = boolean\n    c_tinyint = tinyint\n    c_smallint = smallint\n    c_int = int\n    c_bigint = bigint\n    c_float = float\n    c_double = double\n    c_decimal = "decimal(30, 8)"\n    c_null = "null"\n    c_bytes = bytes\n    c_date = date\n    c_timestamp = timestamp\n    c_row = {\n      c_map = "map<string, map<string, string>>"\n      c_array = "array<int>"\n      c_string = string\n      c_boolean = boolean\n      c_tinyint = tinyint\n      c_smallint = smallint\n      c_int = int\n      c_bigint = bigint\n      c_float = float\n      c_double = double\n      c_decimal = "decimal(30, 8)"\n      c_null = "null"\n      c_bytes = bytes\n      c_date = date\n      c_timestamp = timestamp\n    }\n  }\n}\n')),(0,l.yg)("h3",{id:"random-generation"},"Random Generation"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"16 data matching the type are randomly generated")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'source {\n  # This is a example input plugin **only for test and demonstrate the feature input plugin**\n  FakeSource {\n    row.num = 16\n    schema = {\n      fields {\n        c_map = "map<string, string>"\n        c_array = "array<int>"\n        c_string = string\n        c_boolean = boolean\n        c_tinyint = tinyint\n        c_smallint = smallint\n        c_int = int\n        c_bigint = bigint\n        c_float = float\n        c_double = double\n        c_decimal = "decimal(30, 8)"\n        c_null = "null"\n        c_bytes = bytes\n        c_date = date\n        c_timestamp = timestamp\n      }\n    }\n    plugin_output = "fake"\n  }\n}\n')),(0,l.yg)("h3",{id:"customize-the-data-content-simple"},"Customize the data content Simple:"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"This is a self-defining data source information, defining whether each piece of data is an add or delete modification operation, and defining what each field stores")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'source {\n  FakeSource {\n    schema = {\n      fields {\n        c_map = "map<string, string>"\n        c_array = "array<int>"\n        c_string = string\n        c_boolean = boolean\n        c_tinyint = tinyint\n        c_smallint = smallint\n        c_int = int\n        c_bigint = bigint\n        c_float = float\n        c_double = double\n        c_decimal = "decimal(30, 8)"\n        c_null = "null"\n        c_bytes = bytes\n        c_date = date\n        c_timestamp = timestamp\n      }\n    }\n    rows = [\n      {\n        kind = INSERT\n        fields = [{"a": "b"}, [101], "c_string", true, 117, 15987, 56387395, 7084913402530365000, 1.23, 1.23, "2924137191386439303744.39292216", null, "bWlJWmo=", "2023-04-22", "2023-04-22T23:20:58"]\n      }\n      {\n        kind = UPDATE_BEFORE\n        fields = [{"a": "c"}, [102], "c_string", true, 117, 15987, 56387395, 7084913402530365000, 1.23, 1.23, "2924137191386439303744.39292216", null, "bWlJWmo=", "2023-04-22", "2023-04-22T23:20:58"]\n      }\n      {\n        kind = UPDATE_AFTER\n        fields = [{"a": "e"}, [103], "c_string", true, 117, 15987, 56387395, 7084913402530365000, 1.23, 1.23, "2924137191386439303744.39292216", null, "bWlJWmo=", "2023-04-22", "2023-04-22T23:20:58"]\n      }\n      {\n        kind = DELETE\n        fields = [{"a": "f"}, [104], "c_string", true, 117, 15987, 56387395, 7084913402530365000, 1.23, 1.23, "2924137191386439303744.39292216", null, "bWlJWmo=", "2023-04-22", "2023-04-22T23:20:58"]\n      }\n    ]\n  }\n}\n')),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Due to the constraints of the ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/lightbend/config/blob/main/HOCON.md"},"HOCON")," specification, users cannot directly create byte sequence objects. FakeSource uses strings to assign ",(0,l.yg)("inlineCode",{parentName:"p"},"bytes")," type values. In the example above, the ",(0,l.yg)("inlineCode",{parentName:"p"},"bytes")," type field is assigned ",(0,l.yg)("inlineCode",{parentName:"p"},'"bWlJWmo="'),', which is encoded from "miIZj" with ',(0,l.yg)("strong",{parentName:"p"},"base64"),". Hence, when assigning values to ",(0,l.yg)("inlineCode",{parentName:"p"},"bytes")," type fields, please use strings encoded with ",(0,l.yg)("strong",{parentName:"p"},"base64"),".")),(0,l.yg)("h3",{id:"specified-data-number-simple"},"Specified Data number Simple:"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"This case specifies the number of data generated and the length of the generated value")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'FakeSource {\n  row.num = 10\n  map.size = 10\n  array.size = 10\n  bytes.length = 10\n  string.length = 10\n  schema = {\n    fields {\n      c_map = "map<string, array<int>>"\n      c_array = "array<int>"\n      c_string = string\n      c_boolean = boolean\n      c_tinyint = tinyint\n      c_smallint = smallint\n      c_int = int\n      c_bigint = bigint\n      c_float = float\n      c_double = double\n      c_decimal = "decimal(30, 8)"\n      c_null = "null"\n      c_bytes = bytes\n      c_date = date\n      c_timestamp = timestamp\n      c_row = {\n        c_map = "map<string, map<string, string>>"\n        c_array = "array<int>"\n        c_string = string\n        c_boolean = boolean\n        c_tinyint = tinyint\n        c_smallint = smallint\n        c_int = int\n        c_bigint = bigint\n        c_float = float\n        c_double = double\n        c_decimal = "decimal(30, 8)"\n        c_null = "null"\n        c_bytes = bytes\n        c_date = date\n        c_timestamp = timestamp\n      }\n    }\n  }\n}\n')),(0,l.yg)("h3",{id:"template-data-simple"},"Template data Simple:"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Randomly generated according to the specified template")),(0,l.yg)("p",null,"Using template"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'FakeSource {\n  row.num = 5\n  string.fake.mode = "template"\n  string.template = ["tyrantlucifer", "hailin", "kris", "fanjia", "zongwen", "gaojun"]\n  tinyint.fake.mode = "template"\n  tinyint.template = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  smalling.fake.mode = "template"\n  smallint.template = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  int.fake.mode = "template"\n  int.template = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n  bigint.fake.mode = "template"\n  bigint.template = [30, 31, 32, 33, 34, 35, 36, 37, 38, 39]\n  float.fake.mode = "template"\n  float.template = [40.0, 41.0, 42.0, 43.0]\n  double.fake.mode = "template"\n  double.template = [44.0, 45.0, 46.0, 47.0]\n  schema {\n    fields {\n      c_string = string\n      c_tinyint = tinyint\n      c_smallint = smallint\n      c_int = int\n      c_bigint = bigint\n      c_float = float\n      c_double = double\n    }\n  }\n}\n')),(0,l.yg)("h3",{id:"range-data-simple"},"Range data Simple:"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"The specified data generation range is randomly generated")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'FakeSource {\n  row.num = 5\n  string.template = ["tyrantlucifer", "hailin", "kris", "fanjia", "zongwen", "gaojun"]\n  tinyint.min = 1\n  tinyint.max = 9\n  smallint.min = 10\n  smallint.max = 19\n  int.min = 20\n  int.max = 29\n  bigint.min = 30\n  bigint.max = 39\n  float.min = 40.0\n  float.max = 43.0\n  double.min = 44.0\n  double.max = 47.0\n  schema {\n    fields {\n      c_string = string\n      c_tinyint = tinyint\n      c_smallint = smallint\n      c_int = int\n      c_bigint = bigint\n      c_float = float\n      c_double = double\n    }\n  }\n}\n')),(0,l.yg)("h3",{id:"generate-multiple-tables"},"Generate Multiple tables"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"This is a case of generating a multi-data source test.table1 and test.table2")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'FakeSource {\n  tables_configs = [\n    {\n      row.num = 16\n      schema {\n        table = "test.table1"\n        fields {\n          c_string = string\n          c_tinyint = tinyint\n          c_smallint = smallint\n          c_int = int\n          c_bigint = bigint\n          c_float = float\n          c_double = double\n        }\n      }\n    },\n    {\n      row.num = 17\n      schema {\n        table = "test.table2"\n        fields {\n          c_string = string\n          c_tinyint = tinyint\n          c_smallint = smallint\n          c_int = int\n          c_bigint = bigint\n          c_float = float\n          c_double = double\n        }\n      }\n    }\n  ]\n}\n')),(0,l.yg)("h3",{id:"options-rows-case"},"Options ",(0,l.yg)("inlineCode",{parentName:"h3"},"rows")," Case"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'rows = [\n  {\n    kind = INSERT\n    fields = [1, "A", 100]\n  },\n  {\n    kind = UPDATE_BEFORE\n    fields = [1, "A", 100]\n  },\n  {\n    kind = UPDATE_AFTER\n    fields = [1, "A_1", 100]\n  },\n  {\n    kind = DELETE\n    fields = [1, "A_1", 100]\n  }\n]\n')),(0,l.yg)("h3",{id:"options-table-names-case"},"Options ",(0,l.yg)("inlineCode",{parentName:"h3"},"table-names")," Case"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'\nsource {\n  # This is a example source plugin **only for test and demonstrate the feature source plugin**\n  FakeSource {\n    table-names = ["test.table1", "test.table2", "test.table3"]\n    parallelism = 1\n    schema = {\n      fields {\n        name = "string"\n        age = "int"\n      }\n    }\n  }\n}\n')),(0,l.yg)("h3",{id:"options-defaultvalue-case"},"Options ",(0,l.yg)("inlineCode",{parentName:"h3"},"defaultValue")," Case"),(0,l.yg)("p",null,"Custom data can be generated by ",(0,l.yg)("inlineCode",{parentName:"p"},"row")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"columns"),". For the time type, obtain the current time by\n",(0,l.yg)("inlineCode",{parentName:"p"},"CURRENT_TIMESTAMP")," \u3001",(0,l.yg)("inlineCode",{parentName:"p"},"CURRENT_TIME")," \u3001 ",(0,l.yg)("inlineCode",{parentName:"p"},"CURRENT_DATE")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'    schema = {\n        fields {\n            pk_id = bigint\n            name = string\n            score = int\n            time1 = timestamp\n            time2 = time\n            time3 = date\n        }\n    }\n    # use rows\n    rows = [\n        {\n            kind = INSERT\n            fields = [1, "A", 100, CURRENT_TIMESTAMP, CURRENT_TIME, CURRENT_DATE]\n        }\n    ]\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'      schema = {\n          # use columns\n           columns = [\n           {\n              name = book_publication_time\n              type = timestamp\n              defaultValue = "2024-09-12 15:45:30"\n              comment = "book publication time"\n           },\n           {\n              name = book_publication_time2\n              type = timestamp\n              defaultValue = CURRENT_TIMESTAMP\n              comment = "book publication time2"\n           },\n           {\n              name = book_publication_time3\n              type = time\n              defaultValue = "15:45:30"\n              comment = "book publication time3"\n           },\n           {\n              name = book_publication_time4\n              type = time\n              defaultValue = CURRENT_TIME\n              comment = "book publication time4"\n           },\n           {\n              name = book_publication_time5\n              type = date\n              defaultValue = "2024-09-12"\n              comment = "book publication time5"\n           },\n           {\n              name = book_publication_time6\n              type = date\n              defaultValue = CURRENT_DATE\n              comment = "book publication time6"\n           }\n       ]\n      }\n')),(0,l.yg)("h3",{id:"use-vector-example"},"Use Vector Example"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'\nsource {\n  FakeSource {\n      row.num = 10\n      # Low priority \n      vector.dimension= 4\n      binary.vector.dimension = 8\n      # Low priority \n      schema = {\n           table = "simple_example"\n           columns = [\n           {\n              name = book_id\n              type = bigint\n              nullable = false\n              defaultValue = 0\n              comment = "primary key id"\n           },\n            {\n              name = book_intro_1\n              type = binary_vector\n              columnScale =8\n              comment = "vector"\n           },\n           {\n              name = book_intro_2\n              type = float16_vector\n              columnScale =4\n              comment = "vector"\n           },\n           {\n              name = book_intro_3\n              type = bfloat16_vector\n              columnScale =4\n              comment = "vector"\n           },\n           {\n              name = book_intro_4\n              type = sparse_float_vector\n              columnScale =4\n              comment = "vector"\n           }\n       ]\n     }\n  }\n}\n\n\n')),(0,l.yg)("h2",{id:"changelog"},"Changelog"),(0,l.yg)(r.default,{mdxType:"ChangeLog"}))}u.isMDXComponent=!0}}]);