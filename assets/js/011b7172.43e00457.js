"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[3152],{15680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>y});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),c=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,y=u["".concat(s,".").concat(m)]||u[m]||g[m]||l;return a?t.createElement(y,i(i({ref:n},p),{},{components:a})):t.createElement(y,i({ref:n},p))}));function y(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},92544:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var t=a(58168),r=(a(96540),a(15680));const l={},i="SQL Configuration File",o={unversionedId:"concept/sql-config",id:"version-2.3.9/concept/sql-config",title:"SQL Configuration File",description:"Before writing the sql config file, please make sure that the name of the config file should end with .sql.",source:"@site/versioned_docs/version-2.3.9/concept/sql-config.md",sourceDirName:"concept",slug:"/concept/sql-config",permalink:"/docs/2.3.9/concept/sql-config",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/versioned_docs/version-2.3.9/concept/sql-config.md",tags:[],version:"2.3.9",frontMatter:{},sidebar:"docs",previous:{title:"Sink Options Placeholders",permalink:"/docs/2.3.9/concept/sink-options-placeholders"},next:{title:"Speed Control",permalink:"/docs/2.3.9/concept/speed-limit"}},s={},c=[{value:"Structure of SQL Configuration File",id:"structure-of-sql-configuration-file",level:2},{value:"SQL",id:"sql",level:3},{value:"Explanation of <code>SQL</code> Configuration File",id:"explanation-of-sql-configuration-file",level:2},{value:"General Configuration in SQL File",id:"general-configuration-in-sql-file",level:3},{value:"SOURCE SQL Syntax",id:"source-sql-syntax",level:3},{value:"SINK SQL Syntax",id:"sink-sql-syntax",level:3},{value:"INSERT INTO SELECT Syntax",id:"insert-into-select-syntax",level:3},{value:"INSERT INTO SELECT TABLE Syntax",id:"insert-into-select-table-syntax",level:3},{value:"CREATE TABLE AS Syntax",id:"create-table-as-syntax",level:3},{value:"Example of SQL Configuration File Submission",id:"example-of-sql-configuration-file-submission",level:2}],p={toc:c},u="wrapper";function g(e){let{components:n,...a}=e;return(0,r.yg)(u,(0,t.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"sql-configuration-file"},"SQL Configuration File"),(0,r.yg)("p",null,"Before writing the sql config file, please make sure that the name of the config file should end with ",(0,r.yg)("inlineCode",{parentName:"p"},".sql"),"."),(0,r.yg)("h2",{id:"structure-of-sql-configuration-file"},"Structure of SQL Configuration File"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"SQL")," configuration file appears as follows:"),(0,r.yg)("h3",{id:"sql"},"SQL"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"/* config\nenv {\n  parallelism = 1\n  job.mode = \"BATCH\"\n}\n*/\n\nCREATE TABLE source_table WITH (\n  'connector'='jdbc',\n  'type'='source',\n  'url' = 'jdbc:mysql://localhost:3306/seatunnel',\n  'driver' = 'com.mysql.cj.jdbc.Driver',\n  'user' = 'root',\n  'password' = '123456',\n  'query' = 'select * from source',\n  'properties'= '{\n    useSSL = false,\n    rewriteBatchedStatements = true\n  }'\n);\n\nCREATE TABLE sink_table WITH (\n  'connector'='jdbc',\n  'type'='sink',\n  'url' = 'jdbc:mysql://localhost:3306/seatunnel',\n  'driver' = 'com.mysql.cj.jdbc.Driver',\n  'user' = 'root',\n  'password' = '123456',\n  'generate_sink_sql' = 'true',\n  'database' = 'seatunnel',\n  'table' = 'sink'\n);\n\nINSERT INTO sink_table SELECT id, name, age, email FROM source_table;\n")),(0,r.yg)("h2",{id:"explanation-of-sql-configuration-file"},"Explanation of ",(0,r.yg)("inlineCode",{parentName:"h2"},"SQL")," Configuration File"),(0,r.yg)("h3",{id:"general-configuration-in-sql-file"},"General Configuration in SQL File"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},'/* config\nenv {\n  parallelism = 1\n  job.mode = "BATCH"\n}\n*/\n')),(0,r.yg)("p",null,"In the ",(0,r.yg)("inlineCode",{parentName:"p"},"SQL")," file, common configuration sections are defined using ",(0,r.yg)("inlineCode",{parentName:"p"},"/* config */")," comments. Inside, common configurations like ",(0,r.yg)("inlineCode",{parentName:"p"},"env")," can be defined using ",(0,r.yg)("inlineCode",{parentName:"p"},"HOCON")," format."),(0,r.yg)("h3",{id:"source-sql-syntax"},"SOURCE SQL Syntax"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE source_table WITH (\n  'connector'='jdbc',\n  'type'='source',\n  'url' = 'jdbc:mysql://localhost:3306/seatunnel',\n  'driver' = 'com.mysql.cj.jdbc.Driver',\n  'user' = 'root',\n  'password' = '123456',\n  'query' = 'select * from source',\n  'properties' = '{\n    useSSL = false,\n    rewriteBatchedStatements = true\n  }'\n);\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Using ",(0,r.yg)("inlineCode",{parentName:"li"},"CREATE TABLE ... WITH (...)")," syntax creates a mapping for the source table. The ",(0,r.yg)("inlineCode",{parentName:"li"},"TABLE")," name is the name of the source-mapped table, and the ",(0,r.yg)("inlineCode",{parentName:"li"},"WITH")," syntax contains source-related configuration parameters."),(0,r.yg)("li",{parentName:"ul"},"There are two fixed parameters in the WITH syntax: ",(0,r.yg)("inlineCode",{parentName:"li"},"connector")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"type"),", representing connector plugin name (such as ",(0,r.yg)("inlineCode",{parentName:"li"},"jdbc"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"FakeSource"),", etc.) and source type (fixed as ",(0,r.yg)("inlineCode",{parentName:"li"},"source"),"), respectively."),(0,r.yg)("li",{parentName:"ul"},"Other parameter names can reference relevant configuration parameters of the corresponding connector plugin, but the format needs to be changed to ",(0,r.yg)("inlineCode",{parentName:"li"},"'key' = 'value',"),"."),(0,r.yg)("li",{parentName:"ul"},"If ",(0,r.yg)("inlineCode",{parentName:"li"},"'value'")," is a sub-configuration, you can directly use a string in ",(0,r.yg)("inlineCode",{parentName:"li"},"HOCON")," format. Note: if using a sub-configuration in ",(0,r.yg)("inlineCode",{parentName:"li"},"HOCON")," format, the internal property items must be separated by ",(0,r.yg)("inlineCode",{parentName:"li"},","),", like this:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"'properties' = '{\n  useSSL = false,\n  rewriteBatchedStatements = true\n}'\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"If using ",(0,r.yg)("inlineCode",{parentName:"li"},"'")," within ",(0,r.yg)("inlineCode",{parentName:"li"},"'value'"),", it needs to be escaped with ",(0,r.yg)("inlineCode",{parentName:"li"},"''"),", like this:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"'query' = 'select * from source where name = ''Joy Ding'''\n")),(0,r.yg)("h3",{id:"sink-sql-syntax"},"SINK SQL Syntax"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE sink_table WITH (\n  'connector'='jdbc',\n  'type'='sink',\n  'url' = 'jdbc:mysql://localhost:3306/seatunnel',\n  'driver' = 'com.mysql.cj.jdbc.Driver',\n  'user' = 'root',\n  'password' = '123456',\n  'generate_sink_sql' = 'true',\n  'database' = 'seatunnel',\n  'table' = 'sink'\n);\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Using ",(0,r.yg)("inlineCode",{parentName:"li"},"CREATE TABLE ... WITH (...)")," syntax creates a mapping for the target table. The ",(0,r.yg)("inlineCode",{parentName:"li"},"TABLE")," name is the name of the target-mapped table, and the ",(0,r.yg)("inlineCode",{parentName:"li"},"WITH")," syntax contains sink-related configuration parameters."),(0,r.yg)("li",{parentName:"ul"},"There are two fixed parameters in the ",(0,r.yg)("inlineCode",{parentName:"li"},"WITH")," syntax: ",(0,r.yg)("inlineCode",{parentName:"li"},"connector")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"type"),", representing connector plugin name (such as ",(0,r.yg)("inlineCode",{parentName:"li"},"jdbc"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"console"),", etc.) and target type (fixed as ",(0,r.yg)("inlineCode",{parentName:"li"},"sink"),"), respectively."),(0,r.yg)("li",{parentName:"ul"},"Other parameter names can reference relevant configuration parameters of the corresponding connector plugin, but the format needs to be changed to ",(0,r.yg)("inlineCode",{parentName:"li"},"'key' = 'value',"),".")),(0,r.yg)("h3",{id:"insert-into-select-syntax"},"INSERT INTO SELECT Syntax"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO sink_table SELECT id, name, age, email FROM source_table;\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("inlineCode",{parentName:"li"},"SELECT FROM")," part is the table name of the source-mapped table. If the select field has keyword(",(0,r.yg)("a",{parentName:"li",href:"https://github.com/JSQLParser/JSqlParser/blob/master/src/main/jjtree/net/sf/jsqlparser/parser/JSqlParserCC.jjt"},"refrence"),"),you should use it like ","`","filedName","`",".")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO sink_table SELECT id, name, age, email,`output` FROM source_table;\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("inlineCode",{parentName:"li"},"INSERT INTO")," part is the table name of the target-mapped table."),(0,r.yg)("li",{parentName:"ul"},"Note: This syntax does ",(0,r.yg)("strong",{parentName:"li"},"not support")," specifying fields in ",(0,r.yg)("inlineCode",{parentName:"li"},"INSERT"),", like this: ",(0,r.yg)("inlineCode",{parentName:"li"},"INSERT INTO sink_table (id, name, age, email) SELECT id, name, age, email FROM source_table;"))),(0,r.yg)("h3",{id:"insert-into-select-table-syntax"},"INSERT INTO SELECT TABLE Syntax"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO sink_table SELECT source_table;\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("inlineCode",{parentName:"li"},"SELECT")," part directly uses the name of the source-mapped table, indicating that all data from the source table will be inserted into the target table."),(0,r.yg)("li",{parentName:"ul"},"Using this syntax does not generate related ",(0,r.yg)("inlineCode",{parentName:"li"},"transform")," configurations. This syntax is generally used in multi-table synchronization scenarios. For example:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE source_table WITH (\n  'connector'='jdbc',\n  'type' = 'source',\n  'url' = 'jdbc:mysql://127.0.0.1:3306/seatunnel',\n  'driver' = 'com.mysql.cj.jdbc.Driver',\n  'user' = 'root',\n  'password' = '123456',\n  'table_list' = '[\n      {\n        table_path = \"source.table1\"\n      },\n      {\n        table_path = \"source.table2\",\n        query = \"select * from source.table2\"\n      }\n    ]'\n);\n\nCREATE TABLE sink_table WITH (\n  'connector'='jdbc',\n  'type' = 'sink',\n  'url' = 'jdbc:mysql://127.0.0.1:3306/seatunnel',\n  'driver' = 'com.mysql.cj.jdbc.Driver',\n  'user' = 'root',\n  'password' = '123456',\n  'generate_sink_sql' = 'true',\n  'database' = 'sink'\n);\n\nINSERT INTO sink_table SELECT source_table;\n")),(0,r.yg)("h3",{id:"create-table-as-syntax"},"CREATE TABLE AS Syntax"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE temp1 AS SELECT id, name, age, email FROM source_table;\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"This syntax creates a temporary table with the result of a ",(0,r.yg)("inlineCode",{parentName:"li"},"SELECT")," query, used for ",(0,r.yg)("inlineCode",{parentName:"li"},"INSERT INTO")," operations."),(0,r.yg)("li",{parentName:"ul"},"The syntax of the ",(0,r.yg)("inlineCode",{parentName:"li"},"SELECT")," part refers to: ",(0,r.yg)("a",{parentName:"li",href:"/docs/2.3.9/transform-v2/sql"},"SQL Transform")," ",(0,r.yg)("inlineCode",{parentName:"li"},"query")," configuration item")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE temp1 AS SELECT id, name, age, email FROM source_table;\n\nINSERT INTO sink_table SELECT * FROM temp1;\n")),(0,r.yg)("h2",{id:"example-of-sql-configuration-file-submission"},"Example of SQL Configuration File Submission"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/seatunnel.sh --config ./config/sample.sql\n")))}g.isMDXComponent=!0}}]);