"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[12366],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>c});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var g=r.createContext({}),p=function(e){var n=r.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(g.Provider,{value:n},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,g=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(t),s=a,c=m["".concat(g,".").concat(s)]||m[s]||y[s]||l;return t?r.createElement(c,i(i({ref:n},u),{},{components:t})):r.createElement(c,i({ref:n},u))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=s;var o={};for(var g in n)hasOwnProperty.call(n,g)&&(o[g]=n[g]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},22740:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>i,default:()=>y,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=t(58168),a=(t(96540),t(15680));const l={},i="SQL",o={unversionedId:"transform-v2/sql",id:"transform-v2/sql",title:"SQL",description:"SQL transform plugin",source:"@site/docs/transform-v2/sql.md",sourceDirName:"transform-v2",slug:"/transform-v2/sql",permalink:"/docs/transform-v2/sql",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/transform-v2/sql.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"SQL UDF",permalink:"/docs/transform-v2/sql-udf"},next:{title:"TableMerge",permalink:"/docs/transform-v2/table-merge"}},g={},p=[{value:"Description",id:"description",level:2},{value:"Options",id:"options",level:2},{value:"plugin_input string",id:"plugin_input-string",level:3},{value:"query string",id:"query-string",level:3},{value:"Example",id:"example",level:2},{value:"Struct query",id:"struct-query",level:3},{value:"Job Config Example",id:"job-config-example",level:2},{value:"Changelog",id:"changelog",level:2},{value:"new version",id:"new-version",level:3}],u={toc:p},m="wrapper";function y(e){let{components:n,...t}=e;return(0,a.yg)(m,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"sql"},"SQL"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"SQL transform plugin")),(0,a.yg)("h2",{id:"description"},"Description"),(0,a.yg)("p",null,"Use SQL to transform given input row."),(0,a.yg)("p",null,"SQL transform use memory SQL engine, we can via SQL functions and ability of SQL engine to implement the transform task."),(0,a.yg)("h2",{id:"options"},"Options"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"name"),(0,a.yg)("th",{parentName:"tr",align:null},"type"),(0,a.yg)("th",{parentName:"tr",align:null},"required"),(0,a.yg)("th",{parentName:"tr",align:null},"default value"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"plugin_input"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"yes"),(0,a.yg)("td",{parentName:"tr",align:null},"-")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"plugin_output"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"yes"),(0,a.yg)("td",{parentName:"tr",align:null},"-")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"query"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"yes"),(0,a.yg)("td",{parentName:"tr",align:null},"-")))),(0,a.yg)("h3",{id:"plugin_input-string"},"plugin_input ","[string]"),(0,a.yg)("p",null,"The source table name, the query SQL table name must match this field."),(0,a.yg)("h3",{id:"query-string"},"query ","[string]"),(0,a.yg)("p",null,"The query SQL, it's a simple SQL supported base function and criteria filter operation. But the complex SQL unsupported yet, include: multi source table/rows JOIN and AGGREGATE operation and the like."),(0,a.yg)("p",null,"the query expression can be ",(0,a.yg)("inlineCode",{parentName:"p"},"select [table_name.]column_a")," to query the column that named ",(0,a.yg)("inlineCode",{parentName:"p"},"column_a"),". and the table name is optional.",(0,a.yg)("br",{parentName:"p"}),"\n","or ",(0,a.yg)("inlineCode",{parentName:"p"},"select c_row.c_inner_row.column_b")," to query the inline struct column that named ",(0,a.yg)("inlineCode",{parentName:"p"},"column_b")," within ",(0,a.yg)("inlineCode",{parentName:"p"},"c_row")," column and ",(0,a.yg)("inlineCode",{parentName:"p"},"c_inner_row")," column. ",(0,a.yg)("strong",{parentName:"p"},"In this query expression, can't have table name.")),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)("p",null,"The data read from source is a table like this:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"id"),(0,a.yg)("th",{parentName:"tr",align:null},"name"),(0,a.yg)("th",{parentName:"tr",align:null},"age"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"1"),(0,a.yg)("td",{parentName:"tr",align:null},"Joy Ding"),(0,a.yg)("td",{parentName:"tr",align:null},"20")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"2"),(0,a.yg)("td",{parentName:"tr",align:null},"May Ding"),(0,a.yg)("td",{parentName:"tr",align:null},"21")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"3"),(0,a.yg)("td",{parentName:"tr",align:null},"Kin Dom"),(0,a.yg)("td",{parentName:"tr",align:null},"24")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"4"),(0,a.yg)("td",{parentName:"tr",align:null},"Joy Dom"),(0,a.yg)("td",{parentName:"tr",align:null},"22")))),(0,a.yg)("p",null,"We use SQL query to transform the source data like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'transform {\n  Sql {\n    plugin_input = "fake"\n    plugin_output = "fake1"\n    query = "select id, concat(name, \'_\') as name, age+1 as age from dual where id>0"\n  }\n}\n')),(0,a.yg)("p",null,"Then the data in result table ",(0,a.yg)("inlineCode",{parentName:"p"},"fake1")," will update to"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"id"),(0,a.yg)("th",{parentName:"tr",align:null},"name"),(0,a.yg)("th",{parentName:"tr",align:null},"age"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"1"),(0,a.yg)("td",{parentName:"tr",align:null},"Joy Ding_"),(0,a.yg)("td",{parentName:"tr",align:null},"21")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"2"),(0,a.yg)("td",{parentName:"tr",align:null},"May Ding_"),(0,a.yg)("td",{parentName:"tr",align:null},"22")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"3"),(0,a.yg)("td",{parentName:"tr",align:null},"Kin Dom_"),(0,a.yg)("td",{parentName:"tr",align:null},"25")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"4"),(0,a.yg)("td",{parentName:"tr",align:null},"Joy Dom_"),(0,a.yg)("td",{parentName:"tr",align:null},"23")))),(0,a.yg)("h3",{id:"struct-query"},"Struct query"),(0,a.yg)("p",null,"if your upstream data schema is like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-hacon"},'source {\n  FakeSource {\n    plugin_output = "fake"\n    row.num = 100\n    string.template = ["innerQuery"]\n    schema = {\n      fields {\n        name = "string"\n        c_date = "date"\n        c_row = {\n          c_inner_row = {\n            c_inner_int = "int"\n            c_inner_string = "string"\n            c_inner_timestamp = "timestamp"\n            c_map_1 = "map<string, string>"\n            c_map_2 = "map<string, map<string,string>>"\n          }\n          c_string = "string"\n        }\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Those query all are valid:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"select \nname,\nc_date,\nc_row,\nc_row.c_inner_row,\nc_row.c_string,\nc_row.c_inner_row.c_inner_int,\nc_row.c_inner_row.c_inner_string,\nc_row.c_inner_row.c_inner_timestamp,\nc_row.c_inner_row.c_map_1,\nc_row.c_inner_row.c_map_1.some_key\n")),(0,a.yg)("p",null,"But this query are not valid:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"select \nc_row.c_inner_row.c_map_2.some_key.inner_map_key\n")),(0,a.yg)("p",null,"The map must be the latest struct, can't query the nesting map."),(0,a.yg)("h2",{id:"job-config-example"},"Job Config Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'env {\n  job.mode = "BATCH"\n}\n\nsource {\n  FakeSource {\n    plugin_output = "fake"\n    row.num = 100\n    schema = {\n      fields {\n        id = "int"\n        name = "string"\n        age = "int"\n      }\n    }\n  }\n}\n\ntransform {\n  Sql {\n    plugin_input = "fake"\n    plugin_output = "fake1"\n    query = "select id, concat(name, \'_\') as name, age+1 as age from dual where id>0"\n  }\n}\n\nsink {\n  Console {\n    plugin_input = "fake1"\n  }\n}\n')),(0,a.yg)("h2",{id:"changelog"},"Changelog"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Support struct query")),(0,a.yg)("h3",{id:"new-version"},"new version"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Add SQL Transform Connector")))}y.isMDXComponent=!0}}]);