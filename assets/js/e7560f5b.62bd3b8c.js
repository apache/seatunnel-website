"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[17218],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>d});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(t),y=r,d=u["".concat(s,".").concat(y)]||u[y]||g[y]||l;return t?a.createElement(d,i(i({ref:n},p),{},{components:t})):a.createElement(d,i({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=y;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},57473:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=t(58168),r=(t(96540),t(15680));const l={sidebar_position:2},i="Multi-Table Transform in SeaTunnel",o={unversionedId:"transform-v2/transform-multi-table",id:"version-2.3.9/transform-v2/transform-multi-table",title:"Multi-Table Transform in SeaTunnel",description:"SeaTunnel\u2019s transform feature supports multi-table transformations, which is especially useful when the upstream plugin outputs multiple tables. This allows you to complete all necessary transformation operations within a single transform configuration. Currently, many connectors in SeaTunnel support multi-table outputs, such as JDBCSource and MySQL-CDC. All transforms can be configured for multi-table transform as described below.",source:"@site/versioned_docs/version-2.3.9/transform-v2/transform-multi-table.md",sourceDirName:"transform-v2",slug:"/transform-v2/transform-multi-table",permalink:"/docs/2.3.9/transform-v2/transform-multi-table",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/versioned_docs/version-2.3.9/transform-v2/transform-multi-table.md",tags:[],version:"2.3.9",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Transform Common Options",permalink:"/docs/2.3.9/transform-v2/common-options"},next:{title:"Copy",permalink:"/docs/2.3.9/transform-v2/copy"}},s={},m=[{value:"Properties",id:"properties",level:2},{value:"Matching Logic",id:"matching-logic",level:2},{value:"Explanation",id:"explanation",level:3}],p={toc:m},u="wrapper";function g(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"multi-table-transform-in-seatunnel"},"Multi-Table Transform in SeaTunnel"),(0,r.yg)("p",null,"SeaTunnel\u2019s transform feature supports multi-table transformations, which is especially useful when the upstream plugin outputs multiple tables. This allows you to complete all necessary transformation operations within a single transform configuration. Currently, many connectors in SeaTunnel support multi-table outputs, such as ",(0,r.yg)("inlineCode",{parentName:"p"},"JDBCSource")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"MySQL-CDC"),". All transforms can be configured for multi-table transform as described below."),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"Multi-table Transform has no limitations on Transform capabilities; any Transform configuration can be used in a multi-table Transform. The purpose of multi-table Transform is to handle multiple tables in the data stream individually and merge the Transform configurations of multiple tables into one Transform for easier management.")),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Required"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"table_match_regex"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},".*"),(0,r.yg)("td",{parentName:"tr",align:null},"A regular expression to match the tables that require transformation. By default, it matches all tables. Note that this table name refers to the actual upstream table name, not ",(0,r.yg)("inlineCode",{parentName:"td"},"plugin_output"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"table_transform"),(0,r.yg)("td",{parentName:"tr",align:null},"List"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"You can use a list in ",(0,r.yg)("inlineCode",{parentName:"td"},"table_transform")," to specify rules for individual tables. If a transformation rule is configured for a specific table in ",(0,r.yg)("inlineCode",{parentName:"td"},"table_transform"),", the outer rules will not apply to that table. The rules in ",(0,r.yg)("inlineCode",{parentName:"td"},"table_transform")," take precedence.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"table_transform.table_path"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"When configuring a transformation rule for a table in ",(0,r.yg)("inlineCode",{parentName:"td"},"table_transform"),", you need to specify the table path using the ",(0,r.yg)("inlineCode",{parentName:"td"},"table_path")," field. The table path should include ",(0,r.yg)("inlineCode",{parentName:"td"},"databaseName[.schemaName].tableName"),".")))),(0,r.yg)("h2",{id:"matching-logic"},"Matching Logic"),(0,r.yg)("p",null,"Suppose we read five tables from upstream: ",(0,r.yg)("inlineCode",{parentName:"p"},"test.abc"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"test.abcd"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"test.xyz"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"test.xyzxyz"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"test.www"),". They share the same structure, each having three fields: ",(0,r.yg)("inlineCode",{parentName:"p"},"id"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"name"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"age"),"."),(0,r.yg)("p",null,"| id | name | age |"),(0,r.yg)("p",null,"Now, let's say we want to copy the data from these five tables using the Copy transform with the following specific requirements:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"For tables ",(0,r.yg)("inlineCode",{parentName:"li"},"test.abc")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"test.abcd"),", we need to copy the ",(0,r.yg)("inlineCode",{parentName:"li"},"name")," field to a new field ",(0,r.yg)("inlineCode",{parentName:"li"},"name1"),"."),(0,r.yg)("li",{parentName:"ul"},"For ",(0,r.yg)("inlineCode",{parentName:"li"},"test.xyz"),", we want to copy the ",(0,r.yg)("inlineCode",{parentName:"li"},"name")," field to ",(0,r.yg)("inlineCode",{parentName:"li"},"name2"),"."),(0,r.yg)("li",{parentName:"ul"},"For ",(0,r.yg)("inlineCode",{parentName:"li"},"test.xyzxyz"),", we want to copy the ",(0,r.yg)("inlineCode",{parentName:"li"},"name")," field to ",(0,r.yg)("inlineCode",{parentName:"li"},"name3"),"."),(0,r.yg)("li",{parentName:"ul"},"For ",(0,r.yg)("inlineCode",{parentName:"li"},"test.www"),", no changes are needed.")),(0,r.yg)("p",null,"We can configure this as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-hocon"},'transform {\n  Copy {\n    plugin_input = "fake"  // Optional dataset name to read from\n    plugin_output = "fake1" // Optional dataset name for output\n\n    table_match_regex = "test.a.*" // 1. Matches tables needing transformation, here matching `test.abc` and `test.abcd`\n    src_field = "name" // Source field\n    dest_field = "name1" // Destination field\n\n    table_transform = [{\n      table_path = "test.xyz" // 2. Specifies the table name for transformation\n      src_field = "name"  // Source field\n      dest_field = "name2" // Destination field\n    }, {\n      table_path = "test.xyzxyz"\n      src_field = "name"\n      dest_field = "name3"\n    }]\n  }\n}\n')),(0,r.yg)("h3",{id:"explanation"},"Explanation"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"With the regular expression and corresponding Copy transform options, we match tables ",(0,r.yg)("inlineCode",{parentName:"li"},"test.abc")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"test.abcd")," and copy the ",(0,r.yg)("inlineCode",{parentName:"li"},"name")," field to ",(0,r.yg)("inlineCode",{parentName:"li"},"name1"),"."),(0,r.yg)("li",{parentName:"ol"},"Using the ",(0,r.yg)("inlineCode",{parentName:"li"},"table_transform")," configuration, we specify that for table ",(0,r.yg)("inlineCode",{parentName:"li"},"test.xyz"),", the ",(0,r.yg)("inlineCode",{parentName:"li"},"name")," field should be copied to ",(0,r.yg)("inlineCode",{parentName:"li"},"name2"),".")),(0,r.yg)("p",null,"This allows us to handle transformations for multiple tables within a single transform configuration."),(0,r.yg)("p",null,"For each table, the priority of configuration is: ",(0,r.yg)("inlineCode",{parentName:"p"},"table_transform")," > ",(0,r.yg)("inlineCode",{parentName:"p"},"table_match_regex"),". If no rules match a table, no transformation will be applied."),(0,r.yg)("p",null,"Below are the transform configurations for each table:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"test.abc")," and ",(0,r.yg)("strong",{parentName:"li"},"test.abcd"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-hocon"},'transform {\n  Copy {\n    src_field = "name"\n    dest_field = "name1"\n  }\n}\n')),(0,r.yg)("p",null,"Output structure:"),(0,r.yg)("p",null,"| id | name | age | name1 |"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"test.xyz"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-hocon"},'transform {\n  Copy {\n    src_field = "name"\n    dest_field = "name2"\n  }\n}\n')),(0,r.yg)("p",null,"Output structure:"),(0,r.yg)("p",null,"| id | name | age | name2 |"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"test.xyzxyz"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-hocon"},'transform {\n  Copy {\n    src_field = "name"\n    dest_field = "name3"\n  }\n}\n')),(0,r.yg)("p",null,"Output structure:"),(0,r.yg)("p",null,"| id | name | age | name3 |"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"test.www"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-hocon"},"transform {\n  // No transformation needed\n}\n")),(0,r.yg)("p",null,"Output structure:"),(0,r.yg)("p",null,"| id | name | age |"),(0,r.yg)("p",null,"In this example, we used the Copy transform, but all transforms in SeaTunnel support multi-table transformations, and you can configure them similarly within the corresponding transform block."))}g.isMDXComponent=!0}}]);