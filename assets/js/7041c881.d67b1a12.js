"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[58375,35334],{15680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>d});var a=n(96540);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var g=a.createContext({}),p=function(e){var t=a.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(g.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,g=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=l,d=u["".concat(g,".").concat(c)]||u[c]||s[c]||r;return n?a.createElement(d,i(i({ref:t},m),{},{components:n})):a.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var o={};for(var g in t)hasOwnProperty.call(t,g)&&(o[g]=t[g]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},22030:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>i,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(58168),l=(n(96540),n(15680));const r={},i=void 0,o={unversionedId:"connector-v2/changelog/connector-graphql",id:"version-2.3.11/connector-v2/changelog/connector-graphql",title:"connector-graphql",description:"Change Log",source:"@site/versioned_docs/version-2.3.11/connector-v2/changelog/connector-graphql.md",sourceDirName:"connector-v2/changelog",slug:"/connector-v2/changelog/connector-graphql",permalink:"/docs/2.3.11/connector-v2/changelog/connector-graphql",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/versioned_docs/version-2.3.11/connector-v2/changelog/connector-graphql.md",tags:[],version:"2.3.11",frontMatter:{}},g={},p=[],m={toc:p},u="wrapper";function s(e){let{components:t,...n}=e;return(0,l.yg)(u,(0,a.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("details",null,(0,l.yg)("summary",null," Change Log "),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Change"),(0,l.yg)("th",{parentName:"tr",align:null},"Commit"),(0,l.yg)("th",{parentName:"tr",align:null},"Version"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][connector-http]"," Parameters support placeholder replacement (#9184)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/8617014edc"},"https://github.com/apache/seatunnel/commit/8617014edc")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.11")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"[Feature][Connector-V2]"," Support GraphQL Connector (#8557) (#9021)"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/9eec2520c0"},"https://github.com/apache/seatunnel/commit/9eec2520c0")),(0,l.yg)("td",{parentName:"tr",align:null},"2.3.11"))))))}s.isMDXComponent=!0},71507:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>g,toc:()=>m});var a=n(58168),l=(n(96540),n(15680)),r=n(22030);const i={},o="GraphQL",g={unversionedId:"connector-v2/sink/GraphQL",id:"version-2.3.11/connector-v2/sink/GraphQL",title:"GraphQL",description:"GraphQL sink connector",source:"@site/versioned_docs/version-2.3.11/connector-v2/sink/GraphQL.md",sourceDirName:"connector-v2/sink",slug:"/connector-v2/sink/GraphQL",permalink:"/docs/2.3.11/connector-v2/sink/GraphQL",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/versioned_docs/version-2.3.11/connector-v2/sink/GraphQL.md",tags:[],version:"2.3.11",frontMatter:{},sidebar:"docs",previous:{title:"GoogleFirestore",permalink:"/docs/2.3.11/connector-v2/sink/GoogleFirestore"},next:{title:"Greenplum",permalink:"/docs/2.3.11/connector-v2/sink/Greenplum"}},p={},m=[{value:"Support Those Engines",id:"support-those-engines",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Description",id:"description",level:2},{value:"Supported DataSource Info",id:"supported-datasource-info",level:2},{value:"Sink Options",id:"sink-options",level:2},{value:"Example",id:"example",level:2},{value:"Changelog",id:"changelog",level:2}],u={toc:m},s="wrapper";function c(e){let{components:t,...n}=e;return(0,l.yg)(s,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"graphql"},"GraphQL"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"GraphQL sink connector")),(0,l.yg)("h2",{id:"support-those-engines"},"Support Those Engines"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Spark",(0,l.yg)("br",null),"\nFlink",(0,l.yg)("br",null),"\nSeaTunnel Zeta",(0,l.yg)("br",null))),(0,l.yg)("h2",{id:"key-features"},"Key Features"),(0,l.yg)("ul",{className:"contains-task-list"},(0,l.yg)("li",{parentName:"ul",className:"task-list-item"},(0,l.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,l.yg)("a",{parentName:"li",href:"/docs/2.3.11/concept/connector-v2-features"},"exactly-once")),(0,l.yg)("li",{parentName:"ul",className:"task-list-item"},(0,l.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,l.yg)("a",{parentName:"li",href:"/docs/2.3.11/concept/connector-v2-features"},"cdc")),(0,l.yg)("li",{parentName:"ul",className:"task-list-item"},(0,l.yg)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,l.yg)("a",{parentName:"li",href:"/docs/2.3.11/concept/connector-v2-features"},"support multiple table write"))),(0,l.yg)("h2",{id:"description"},"Description"),(0,l.yg)("p",null,"Used to launch web hooks using data."),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"For example, if the data from upstream is ","[",(0,l.yg)("inlineCode",{parentName:"p"},'label: {"__name__": "test1"}, value: 1.2.3,time:2024-08-15T17:00:00'),"]",", the body content is the following: ",(0,l.yg)("inlineCode",{parentName:"p"},'{"label":{"__name__": "test1"}, "value":"1.23","time":"2024-08-15T17:00:00"}'))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Tips: GraphQL sink only support ",(0,l.yg)("inlineCode",{parentName:"strong"},"post json")," webhook and the data from source will be treated as body content in web hook.And does not support passing past data")),(0,l.yg)("h2",{id:"supported-datasource-info"},"Supported DataSource Info"),(0,l.yg)("p",null,"In order to use the Http connector, the following dependencies are required.\nThey can be downloaded via install-plugin.sh or from the Maven central repository."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Datasource"),(0,l.yg)("th",{parentName:"tr",align:null},"Supported Versions"),(0,l.yg)("th",{parentName:"tr",align:null},"Dependency"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"Http"),(0,l.yg)("td",{parentName:"tr",align:null},"universal"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://mvnrepository.com/artifact/org.apache.seatunnel/seatunnel-connectors-v2/connector-prometheus"},"Download"))))),(0,l.yg)("h2",{id:"sink-options"},"Sink Options"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Name"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Required"),(0,l.yg)("th",{parentName:"tr",align:null},"Default"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"url"),(0,l.yg)("td",{parentName:"tr",align:null},"String"),(0,l.yg)("td",{parentName:"tr",align:null},"Yes"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"Http request url")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"query"),(0,l.yg)("td",{parentName:"tr",align:null},"String"),(0,l.yg)("td",{parentName:"tr",align:null},"Yes"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"GraphQL query")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"variables"),(0,l.yg)("td",{parentName:"tr",align:null},"String"),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"GraphQL variables")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"valueCover"),(0,l.yg)("td",{parentName:"tr",align:null},"Boolean"),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"Whether the data overwrites the variable value")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"headers"),(0,l.yg)("td",{parentName:"tr",align:null},"Map"),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"Http headers")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"retry"),(0,l.yg)("td",{parentName:"tr",align:null},"Int"),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"The max retry times if request http return to ",(0,l.yg)("inlineCode",{parentName:"td"},"IOException"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"retry_backoff_multiplier_ms"),(0,l.yg)("td",{parentName:"tr",align:null},"Int"),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null},"100"),(0,l.yg)("td",{parentName:"tr",align:null},"The retry-backoff times(millis) multiplier if request http failed")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"retry_backoff_max_ms"),(0,l.yg)("td",{parentName:"tr",align:null},"Int"),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null},"10000"),(0,l.yg)("td",{parentName:"tr",align:null},"The maximum retry-backoff times(millis) if request http failed")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"connect_timeout_ms"),(0,l.yg)("td",{parentName:"tr",align:null},"Int"),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null},"12000"),(0,l.yg)("td",{parentName:"tr",align:null},"Connection timeout setting, default 12s.")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"socket_timeout_ms"),(0,l.yg)("td",{parentName:"tr",align:null},"Int"),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null},"60000"),(0,l.yg)("td",{parentName:"tr",align:null},"Socket timeout setting, default 60s.")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"key_timestamp"),(0,l.yg)("td",{parentName:"tr",align:null},"Int"),(0,l.yg)("td",{parentName:"tr",align:null},"NO"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"prometheus timestamp  key .")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"key_label"),(0,l.yg)("td",{parentName:"tr",align:null},"String"),(0,l.yg)("td",{parentName:"tr",align:null},"yes"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"prometheus label key")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"key_value"),(0,l.yg)("td",{parentName:"tr",align:null},"Double"),(0,l.yg)("td",{parentName:"tr",align:null},"yes"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"prometheus value")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"batch_size"),(0,l.yg)("td",{parentName:"tr",align:null},"Int"),(0,l.yg)("td",{parentName:"tr",align:null},"false"),(0,l.yg)("td",{parentName:"tr",align:null},"1024"),(0,l.yg)("td",{parentName:"tr",align:null},"prometheus batch size write")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"flush_interval"),(0,l.yg)("td",{parentName:"tr",align:null},"Long"),(0,l.yg)("td",{parentName:"tr",align:null},"false"),(0,l.yg)("td",{parentName:"tr",align:null},"300000L"),(0,l.yg)("td",{parentName:"tr",align:null},"prometheus flush commit interval")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"common-options"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null},"-"),(0,l.yg)("td",{parentName:"tr",align:null},"Sink plugin common parameters, please refer to ",(0,l.yg)("a",{parentName:"td",href:"/docs/2.3.11/connector-v2/sink-common-options"},"Sink Common Options")," for details")))),(0,l.yg)("h2",{id:"example"},"Example"),(0,l.yg)("p",null,"simple:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'env {\n  parallelism = 1\n  job.mode = "BATCH"\n}\n\nsource {\n  FakeSource {\n    tables_configs = [\n       {\n        schema = {\n          table = "graphql_sink_1"\n         fields {\n                id = int\n                val_bool = boolean\n                val_int8 = tinyint\n                val_int16 = smallint\n                val_int32 = int\n                val_int64 = bigint\n                val_float = float\n                val_double = double\n                val_decimal = "decimal(16, 1)"\n                val_string = string\n                val_unixtime_micros = timestamp\n      }\n        }\n            rows = [\n              {\n                kind = INSERT\n                fields = [1, true, 1, 2, 3, 4, 4.3,5.3,6.3, "NEW", "2020-02-02T02:02:02"]\n              }\n              ]\n       },\n       {\n       schema = {\n         table = "graphql_sink_2"\n              fields {\n                        id = int\n                        val_bool = boolean\n                        val_int8 = tinyint\n                        val_int16 = smallint\n                        val_int32 = int\n                        val_int64 = bigint\n                        val_float = float\n                        val_double = double\n                        val_decimal = "decimal(16, 1)"\n                        val_string = string\n                        val_unixtime_micros = timestamp\n              }\n       }\n           rows = [\n             {\n               kind = INSERT\n               fields = [2, true, 1, 2, 3, 4, 4.3,5.3,6.3, "NEW", "2020-02-02T02:02:02"]\n             }\n             ]\n      }\n    ]\n  }\n}\n\nsink {\n   GraphQL {\n        url = "http://192.168.1.103:9081/v1/graphql"\n        query = """\n         mutation MyMutation(\n           $id: Int!\n           $val_bool: Boolean!\n           $val_int8: smallint!\n           $val_int16: smallint!\n           $val_int32: Int!\n           $val_int64: bigint!\n           $val_float: Float!\n           $val_double: Float!\n           $val_decimal: numeric!\n           $val_string: String!\n           $val_unixtime_micros: timestamp!\n         ) {\n           insert_sink(objects: {\n             id: $id,\n             val_bool: $val_bool,\n             val_int8: $val_int8,\n             val_int16: $val_int16,\n             val_int32: $val_int32,\n             val_int64: $val_int64,\n             val_float: $val_float,\n             val_double: $val_double,\n             val_decimal: $val_decimal,\n             val_string: $val_string,\n             val_unixtime_micros: $val_unixtime_micros\n           }) {\n             affected_rows\n             returning {\n               id\n               val_bool\n               val_decimal\n               val_double\n               val_float\n               val_int16\n               val_int32\n               val_int64\n               val_int8\n               val_string\n               val_unixtime_micros\n             }\n           }\n         }\n        """\n        variables = {\n            "val_bool": True\n        }\n    }\n}\n\n')),(0,l.yg)("h2",{id:"changelog"},"Changelog"),(0,l.yg)(r.default,{mdxType:"ChangeLog"}))}c.isMDXComponent=!0}}]);