"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[91016],{15680:(e,n,a)=>{a.d(n,{xA:()=>g,yg:()=>m});var t=a(96540);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var d=t.createContext({}),p=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},g=function(e){var n=p(e.components);return t.createElement(d.Provider,{value:n},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,r=e.originalType,d=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),u=p(a),y=l,m=u["".concat(d,".").concat(y)]||u[y]||s[y]||r;return a?t.createElement(m,o(o({ref:n},g),{},{components:a})):t.createElement(m,o({ref:n},g))}));function m(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=y;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[u]="string"==typeof e?e:l,o[1]=i;for(var p=2;p<r;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}y.displayName="MDXCreateElement"},74443:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>s,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var t=a(58168),l=(a(96540),a(15680));const r={},o="JsonPath",i={unversionedId:"transform-v2/jsonpath",id:"version-2.3.9/transform-v2/jsonpath",title:"JsonPath",description:"JsonPath transform plugin",source:"@site/versioned_docs/version-2.3.9/transform-v2/jsonpath.md",sourceDirName:"transform-v2",slug:"/transform-v2/jsonpath",permalink:"/docs/2.3.9/transform-v2/jsonpath",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/versioned_docs/version-2.3.9/transform-v2/jsonpath.md",tags:[],version:"2.3.9",frontMatter:{},sidebar:"docs",previous:{title:"Filter",permalink:"/docs/2.3.9/transform-v2/filter"},next:{title:"LLM",permalink:"/docs/2.3.9/transform-v2/llm"}},d={},p=[{value:"Description",id:"description",level:2},{value:"Options",id:"options",level:2},{value:"common options string",id:"common-options-string",level:3},{value:"row_error_handle_way Enum",id:"row_error_handle_way-enum",level:3},{value:"columnsarray",id:"columnsarray",level:3},{value:"option",id:"option",level:4},{value:"src_field",id:"src_field",level:4},{value:"dest_field",id:"dest_field",level:4},{value:"dest_type",id:"dest_type",level:4},{value:"path",id:"path",level:4},{value:"column_error_handle_way Enum",id:"column_error_handle_way-enum",level:4},{value:"Read Json Example",id:"read-json-example",level:2},{value:"Read SeatunnelRow Example",id:"read-seatunnelrow-example",level:2},{value:"Configure error data handle way",id:"configure-error-data-handle-way",level:2},{value:"Skip error data rows",id:"skip-error-data-rows",level:3},{value:"Skip error data column",id:"skip-error-data-column",level:3},{value:"Skip the row for specified column error",id:"skip-the-row-for-specified-column-error",level:3},{value:"Changelog",id:"changelog",level:2}],g={toc:p},u="wrapper";function s(e){let{components:n,...a}=e;return(0,l.yg)(u,(0,t.A)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"jsonpath"},"JsonPath"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"JsonPath transform plugin")),(0,l.yg)("h2",{id:"description"},"Description"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Support use jsonpath select data")),(0,l.yg)("h2",{id:"options"},"Options"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"name"),(0,l.yg)("th",{parentName:"tr",align:null},"type"),(0,l.yg)("th",{parentName:"tr",align:null},"required"),(0,l.yg)("th",{parentName:"tr",align:null},"default value"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"columns"),(0,l.yg)("td",{parentName:"tr",align:null},"Array"),(0,l.yg)("td",{parentName:"tr",align:null},"Yes"),(0,l.yg)("td",{parentName:"tr",align:null})),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"row_error_handle_way"),(0,l.yg)("td",{parentName:"tr",align:null},"Enum"),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null},"FAIL")))),(0,l.yg)("h3",{id:"common-options-string"},"common options ","[string]"),(0,l.yg)("p",null,"Transform plugin common parameters, please refer to ",(0,l.yg)("a",{parentName:"p",href:"/docs/2.3.9/transform-v2/common-options"},"Transform Plugin")," for details"),(0,l.yg)("h3",{id:"row_error_handle_way-enum"},"row_error_handle_way ","[Enum]"),(0,l.yg)("p",null,"This option is used to specify the processing method when an error occurs in the row, the default value is ",(0,l.yg)("inlineCode",{parentName:"p"},"FAIL"),"."),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"FAIL: When ",(0,l.yg)("inlineCode",{parentName:"li"},"FAIL")," is selected, data format error will block and an exception will be thrown."),(0,l.yg)("li",{parentName:"ul"},"SKIP: When ",(0,l.yg)("inlineCode",{parentName:"li"},"SKIP")," is selected, data format error will skip this row data.")),(0,l.yg)("h3",{id:"columnsarray"},"columns","[array]"),(0,l.yg)("h4",{id:"option"},"option"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"name"),(0,l.yg)("th",{parentName:"tr",align:null},"type"),(0,l.yg)("th",{parentName:"tr",align:null},"required"),(0,l.yg)("th",{parentName:"tr",align:null},"default value"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"src_field"),(0,l.yg)("td",{parentName:"tr",align:null},"String"),(0,l.yg)("td",{parentName:"tr",align:null},"Yes"),(0,l.yg)("td",{parentName:"tr",align:null})),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"dest_field"),(0,l.yg)("td",{parentName:"tr",align:null},"String"),(0,l.yg)("td",{parentName:"tr",align:null},"Yes"),(0,l.yg)("td",{parentName:"tr",align:null})),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"path"),(0,l.yg)("td",{parentName:"tr",align:null},"String"),(0,l.yg)("td",{parentName:"tr",align:null},"Yes"),(0,l.yg)("td",{parentName:"tr",align:null})),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"dest_type"),(0,l.yg)("td",{parentName:"tr",align:null},"String"),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null},"String")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"column_error_handle_way"),(0,l.yg)("td",{parentName:"tr",align:null},"Enum"),(0,l.yg)("td",{parentName:"tr",align:null},"No"),(0,l.yg)("td",{parentName:"tr",align:null})))),(0,l.yg)("h4",{id:"src_field"},"src_field"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"the json source field you want to parse")),(0,l.yg)("p",null,"Support SeatunnelDateType"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"STRING"),(0,l.yg)("li",{parentName:"ul"},"BYTES"),(0,l.yg)("li",{parentName:"ul"},"ARRAY"),(0,l.yg)("li",{parentName:"ul"},"MAP"),(0,l.yg)("li",{parentName:"ul"},"ROW")),(0,l.yg)("h4",{id:"dest_field"},"dest_field"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"after use jsonpath output field")),(0,l.yg)("h4",{id:"dest_type"},"dest_type"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"the type of dest field")),(0,l.yg)("h4",{id:"path"},"path"),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Jsonpath")),(0,l.yg)("h4",{id:"column_error_handle_way-enum"},"column_error_handle_way ","[Enum]"),(0,l.yg)("p",null,"This option is used to specify the processing method when an error occurs in the column."),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"FAIL: When ",(0,l.yg)("inlineCode",{parentName:"li"},"FAIL")," is selected, data format error will block and an exception will be thrown."),(0,l.yg)("li",{parentName:"ul"},"SKIP: When ",(0,l.yg)("inlineCode",{parentName:"li"},"SKIP")," is selected, data format error will skip this column data."),(0,l.yg)("li",{parentName:"ul"},"SKIP_ROW: When ",(0,l.yg)("inlineCode",{parentName:"li"},"SKIP_ROW")," is selected, data format error will skip this row data.")),(0,l.yg)("h2",{id:"read-json-example"},"Read Json Example"),(0,l.yg)("p",null,"The data read from source is a table like this json:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "c_string": "this is a string",\n    "c_boolean": true,\n    "c_integer": 42,\n    "c_float": 3.14,\n    "c_double": 3.14,\n    "c_decimal": 10.55,\n    "c_date": "2023-10-29",\n    "c_datetime": "16:12:43.459",\n    "c_array":["item1", "item2", "item3"]\n  }\n}\n')),(0,l.yg)("p",null,"Assuming we want to use JsonPath to extract properties."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json"},'transform {\n  JsonPath {\n    plugin_input = "fake"\n    plugin_output = "fake1"\n    columns = [\n     {\n        "src_field" = "data"\n        "path" = "$.data.c_string"\n        "dest_field" = "c1_string"\n     },\n     {\n        "src_field" = "data"\n        "path" = "$.data.c_boolean"\n        "dest_field" = "c1_boolean"\n        "dest_type" = "boolean"\n     },\n     {\n        "src_field" = "data"\n        "path" = "$.data.c_integer"\n        "dest_field" = "c1_integer"\n        "dest_type" = "int"\n     },\n     {\n        "src_field" = "data"\n        "path" = "$.data.c_float"\n        "dest_field" = "c1_float"\n        "dest_type" = "float"\n     },\n     {\n        "src_field" = "data"\n        "path" = "$.data.c_double"\n        "dest_field" = "c1_double"\n        "dest_type" = "double"\n     },\n      {\n         "src_field" = "data"\n         "path" = "$.data.c_decimal"\n         "dest_field" = "c1_decimal"\n         "dest_type" = "decimal(4,2)"\n      },\n      {\n         "src_field" = "data"\n         "path" = "$.data.c_date"\n         "dest_field" = "c1_date"\n         "dest_type" = "date"\n      },\n      {\n         "src_field" = "data"\n         "path" = "$.data.c_datetime"\n         "dest_field" = "c1_datetime"\n         "dest_type" = "time"\n      },\n            {\n         "src_field" = "data"\n         "path" = "$.data.c_array"\n         "dest_field" = "c1_array"\n         "dest_type" = "array<string>"        \n      }\n    ]\n  }\n}\n')),(0,l.yg)("p",null,"Then the data result table ",(0,l.yg)("inlineCode",{parentName:"p"},"fake1")," will like this"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"data"),(0,l.yg)("th",{parentName:"tr",align:null},"c1_string"),(0,l.yg)("th",{parentName:"tr",align:null},"c1_boolean"),(0,l.yg)("th",{parentName:"tr",align:null},"c1_integer"),(0,l.yg)("th",{parentName:"tr",align:null},"c1_float"),(0,l.yg)("th",{parentName:"tr",align:null},"c1_double"),(0,l.yg)("th",{parentName:"tr",align:null},"c1_decimal"),(0,l.yg)("th",{parentName:"tr",align:null},"c1_date"),(0,l.yg)("th",{parentName:"tr",align:null},"c1_datetime"),(0,l.yg)("th",{parentName:"tr",align:null},"c1_array"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"too much content not to show"),(0,l.yg)("td",{parentName:"tr",align:null},"this is a string"),(0,l.yg)("td",{parentName:"tr",align:null},"true"),(0,l.yg)("td",{parentName:"tr",align:null},"42"),(0,l.yg)("td",{parentName:"tr",align:null},"3.14"),(0,l.yg)("td",{parentName:"tr",align:null},"3.14"),(0,l.yg)("td",{parentName:"tr",align:null},"10.55"),(0,l.yg)("td",{parentName:"tr",align:null},"2023-10-29"),(0,l.yg)("td",{parentName:"tr",align:null},"16:12:43.459"),(0,l.yg)("td",{parentName:"tr",align:null},'["item1", "item2", "item3"]')))),(0,l.yg)("h2",{id:"read-seatunnelrow-example"},"Read SeatunnelRow Example"),(0,l.yg)("p",null,"Suppose a column in a row of data is of type SeatunnelRow and that the name of the column is col"),(0,l.yg)("table",null,(0,l.yg)("tr",null,(0,l.yg)("th",{colspan:"2"},"SeatunnelRow(col)"),(0,l.yg)("th",null,"other")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"name"),(0,l.yg)("td",null,"age"),(0,l.yg)("td",null,"....")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"a"),(0,l.yg)("td",null,"18"),(0,l.yg)("td",null,"...."))),(0,l.yg)("p",null,"The JsonPath transform converts the values of seatunnel into an array,"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'transform {\n  JsonPath {\n    plugin_input = "fake"\n    plugin_output = "fake1"\n  \n    row_error_handle_way = FAIL\n    columns = [\n     {\n        "src_field" = "col"\n        "path" = "$[0]"\n        "dest_field" = "name"\n        "dest_type" = "string"\n     },\n     {\n        "src_field" = "col"\n        "path" = "$[1]"\n        "dest_field" = "age"\n        "dest_type" = "int"\n     }\n    ]\n  }\n}\n')),(0,l.yg)("p",null,"Then the data result table ",(0,l.yg)("inlineCode",{parentName:"p"},"fake1")," will like this"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"name"),(0,l.yg)("th",{parentName:"tr",align:null},"age"),(0,l.yg)("th",{parentName:"tr",align:null},"col"),(0,l.yg)("th",{parentName:"tr",align:null},"other"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"a"),(0,l.yg)("td",{parentName:"tr",align:null},"18"),(0,l.yg)("td",{parentName:"tr",align:null},'["a",18]'),(0,l.yg)("td",{parentName:"tr",align:null},"...")))),(0,l.yg)("h2",{id:"configure-error-data-handle-way"},"Configure error data handle way"),(0,l.yg)("p",null,"You can configure ",(0,l.yg)("inlineCode",{parentName:"p"},"row_error_handle_way")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"column_error_handle_way")," to handle abnormal data. Both are optional."),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"row_error_handle_way")," is used to handle all data anomalies in the row data, while ",(0,l.yg)("inlineCode",{parentName:"p"},"column_error_handle_way")," is used to handle data anomalies in a column. It has a higher priority than ",(0,l.yg)("inlineCode",{parentName:"p"},"row_error_handle_way"),"."),(0,l.yg)("h3",{id:"skip-error-data-rows"},"Skip error data rows"),(0,l.yg)("p",null,"Configure to skip row data with exceptions in any column"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'transform {\n  JsonPath {\n\n    row_error_handle_way = SKIP\n    \n    columns = [\n     {\n        "src_field" = "json_data"\n        "path" = "$.f1"\n        "dest_field" = "json_data_f1"\n     },\n     {\n        "src_field" = "json_data"\n        "path" = "$.f2"\n        "dest_field" = "json_data_f2"\n     }\n    ]\n  }\n}\n')),(0,l.yg)("h3",{id:"skip-error-data-column"},"Skip error data column"),(0,l.yg)("p",null,"Configure only ",(0,l.yg)("inlineCode",{parentName:"p"},"json_data_f1")," column data exceptions to skip and fill in null values, other column data exceptions will continue to throw exception interrupt handlers"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'transform {\n  JsonPath {\n\n    row_error_handle_way = FAIL\n    \n    columns = [\n     {\n        "src_field" = "json_data"\n        "path" = "$.f1"\n        "dest_field" = "json_data_f1"\n        \n        "column_error_handle_way" = "SKIP"\n     },\n     {\n        "src_field" = "json_data"\n        "path" = "$.f2"\n        "dest_field" = "json_data_f2"\n     }\n    ]\n  }\n}\n')),(0,l.yg)("h3",{id:"skip-the-row-for-specified-column-error"},"Skip the row for specified column error"),(0,l.yg)("p",null,"Configure to skip the row of data only for ",(0,l.yg)("inlineCode",{parentName:"p"},"json_data_f1")," column data exceptions, and continue to throw exceptions to interrupt the handler for other column data exceptions"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-hocon"},'transform {\n  JsonPath {\n\n    row_error_handle_way = FAIL\n    \n    columns = [\n     {\n        "src_field" = "json_data"\n        "path" = "$.f1"\n        "dest_field" = "json_data_f1"\n        \n        "column_error_handle_way" = "SKIP_ROW"\n     },\n     {\n        "src_field" = "json_data"\n        "path" = "$.f2"\n        "dest_field" = "json_data_f2"\n     }\n    ]\n  }\n}\n')),(0,l.yg)("h2",{id:"changelog"},"Changelog"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Add JsonPath Transform")))}s.isMDXComponent=!0}}]);