"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[31019,96477],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>y});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),g=a,y=u["".concat(c,".").concat(g)]||u[g]||d[g]||l;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},99039:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=n(58168),a=(n(96540),n(15680));const l={},o=void 0,i={unversionedId:"connector-v2/changelog/connector-cloudberry",id:"connector-v2/changelog/connector-cloudberry",title:"connector-cloudberry",description:"Change Log",source:"@site/docs/connector-v2/changelog/connector-cloudberry.md",sourceDirName:"connector-v2/changelog",slug:"/connector-v2/changelog/connector-cloudberry",permalink:"/docs/connector-v2/changelog/connector-cloudberry",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/connector-v2/changelog/connector-cloudberry.md",tags:[],version:"current",frontMatter:{}},c={},s=[],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.yg)(u,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("details",null,(0,a.yg)("summary",null," Change Log "),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Change"),(0,a.yg)("th",{parentName:"tr",align:null},"Commit"),(0,a.yg)("th",{parentName:"tr",align:null},"Version"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"[Feature][Connector]"," Add Apache Cloudberry Support (#8985)"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://github.com/apache/seatunnel/commit/b6f82c1"},"https://github.com/apache/seatunnel/commit/b6f82c1")),(0,a.yg)("td",{parentName:"tr",align:null},"dev"))))))}d.isMDXComponent=!0},39236:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(58168),a=(n(96540),n(15680)),l=n(99039);const o={},i="Cloudberry",c={unversionedId:"connector-v2/source/Cloudberry",id:"connector-v2/source/Cloudberry",title:"Cloudberry",description:"JDBC Cloudberry Source Connector",source:"@site/docs/connector-v2/source/Cloudberry.md",sourceDirName:"connector-v2/source",slug:"/connector-v2/source/Cloudberry",permalink:"/docs/connector-v2/source/Cloudberry",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/connector-v2/source/Cloudberry.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Clickhouse",permalink:"/docs/connector-v2/source/Clickhouse"},next:{title:"CosFile",permalink:"/docs/connector-v2/source/CosFile"}},s={},p=[{value:"Support Those Engines",id:"support-those-engines",level:2},{value:"Using Dependency",id:"using-dependency",level:2},{value:"For Spark/Flink Engine",id:"for-sparkflink-engine",level:3},{value:"For SeaTunnel Zeta Engine",id:"for-seatunnel-zeta-engine",level:3},{value:"Key Features",id:"key-features",level:2},{value:"Description",id:"description",level:2},{value:"Supported DataSource Info",id:"supported-datasource-info",level:2},{value:"Database Dependency",id:"database-dependency",level:2},{value:"Data Type Mapping",id:"data-type-mapping",level:2},{value:"Options",id:"options",level:2},{value:"Parallel Reader",id:"parallel-reader",level:2},{value:"Task Example",id:"task-example",level:2},{value:"Simple:",id:"simple",level:3},{value:"Parallel reading with table_path:",id:"parallel-reading-with-table_path",level:3},{value:"Multiple table read:",id:"multiple-table-read",level:3},{value:"Changelog",id:"changelog",level:2}],u={toc:p},d="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"cloudberry"},"Cloudberry"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"JDBC Cloudberry Source Connector")),(0,a.yg)("h2",{id:"support-those-engines"},"Support Those Engines"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Spark",(0,a.yg)("br",null),"\nFlink",(0,a.yg)("br",null),"\nSeaTunnel Zeta",(0,a.yg)("br",null))),(0,a.yg)("h2",{id:"using-dependency"},"Using Dependency"),(0,a.yg)("h3",{id:"for-sparkflink-engine"},"For Spark/Flink Engine"),(0,a.yg)("blockquote",null,(0,a.yg)("ol",{parentName:"blockquote"},(0,a.yg)("li",{parentName:"ol"},"You need to ensure that the ",(0,a.yg)("a",{parentName:"li",href:"https://mvnrepository.com/artifact/org.postgresql/postgresql"},"jdbc driver jar package")," has been placed in directory ",(0,a.yg)("inlineCode",{parentName:"li"},"${SEATUNNEL_HOME}/plugins/"),"."))),(0,a.yg)("h3",{id:"for-seatunnel-zeta-engine"},"For SeaTunnel Zeta Engine"),(0,a.yg)("blockquote",null,(0,a.yg)("ol",{parentName:"blockquote"},(0,a.yg)("li",{parentName:"ol"},"You need to ensure that the ",(0,a.yg)("a",{parentName:"li",href:"https://mvnrepository.com/artifact/org.postgresql/postgresql"},"jdbc driver jar package")," has been placed in directory ",(0,a.yg)("inlineCode",{parentName:"li"},"${SEATUNNEL_HOME}/lib/"),"."))),(0,a.yg)("h2",{id:"key-features"},"Key Features"),(0,a.yg)("ul",{className:"contains-task-list"},(0,a.yg)("li",{parentName:"ul",className:"task-list-item"},(0,a.yg)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,a.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"batch")),(0,a.yg)("li",{parentName:"ul",className:"task-list-item"},(0,a.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,a.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"stream")),(0,a.yg)("li",{parentName:"ul",className:"task-list-item"},(0,a.yg)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,a.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"exactly-once")),(0,a.yg)("li",{parentName:"ul",className:"task-list-item"},(0,a.yg)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,a.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"column projection")),(0,a.yg)("li",{parentName:"ul",className:"task-list-item"},(0,a.yg)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,a.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"parallelism")),(0,a.yg)("li",{parentName:"ul",className:"task-list-item"},(0,a.yg)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,a.yg)("a",{parentName:"li",href:"/docs/concept/connector-v2-features"},"support user-defined split"))),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"supports query SQL and can achieve projection effect.")),(0,a.yg)("h2",{id:"description"},"Description"),(0,a.yg)("p",null,"Read external data source data through JDBC. Cloudberry currently does not have its own native JDBC driver, using PostgreSQL's drivers and implementation."),(0,a.yg)("h2",{id:"supported-datasource-info"},"Supported DataSource Info"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Datasource"),(0,a.yg)("th",{parentName:"tr",align:null},"Supported Versions"),(0,a.yg)("th",{parentName:"tr",align:null},"Driver"),(0,a.yg)("th",{parentName:"tr",align:null},"Url"),(0,a.yg)("th",{parentName:"tr",align:null},"Maven"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Cloudberry"),(0,a.yg)("td",{parentName:"tr",align:null},"Uses PostgreSQL driver implementation"),(0,a.yg)("td",{parentName:"tr",align:null},"org.postgresql.Driver"),(0,a.yg)("td",{parentName:"tr",align:null},"jdbc:postgresql://localhost:5432/test"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://mvnrepository.com/artifact/org.postgresql/postgresql"},"Download"))))),(0,a.yg)("h2",{id:"database-dependency"},"Database Dependency"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Please download the PostgreSQL driver jar and copy it to the '$SEATUNNEL_HOME/plugins/jdbc/lib/' working directory",(0,a.yg)("br",null),"\nFor example: cp postgresql-xxx.jar $SEATUNNEL_HOME/plugins/jdbc/lib/")),(0,a.yg)("h2",{id:"data-type-mapping"},"Data Type Mapping"),(0,a.yg)("p",null,"Cloudberry uses PostgreSQL's data type implementation. Please refer to PostgreSQL documentation for data type compatibility and mappings."),(0,a.yg)("h2",{id:"options"},"Options"),(0,a.yg)("p",null,"Cloudberry connector uses the same options as PostgreSQL. For detailed configuration options, please refer to the PostgreSQL documentation."),(0,a.yg)("p",null,"Key options include:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"url (required): The JDBC connection URL"),(0,a.yg)("li",{parentName:"ul"},"driver (required): The driver class name (org.postgresql.Driver)"),(0,a.yg)("li",{parentName:"ul"},"user/password: Authentication credentials"),(0,a.yg)("li",{parentName:"ul"},"query or table_path: What data to read"),(0,a.yg)("li",{parentName:"ul"},"partition options for parallel reading")),(0,a.yg)("h2",{id:"parallel-reader"},"Parallel Reader"),(0,a.yg)("p",null,"Cloudberry supports parallel reading following the same rules as PostgreSQL connector. For detailed information on split strategies and parallel reading options, please refer to the PostgreSQL connector documentation."),(0,a.yg)("h2",{id:"task-example"},"Task Example"),(0,a.yg)("h3",{id:"simple"},"Simple:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-hocon"},'env {\n  parallelism = 4\n  job.mode = "BATCH"\n}\n\nsource {\n  Jdbc {\n    url = "jdbc:postgresql://localhost:5432/cloudberrydb"\n    driver = "org.postgresql.Driver"\n    user = "dbadmin"\n    password = "password"\n    query = "select * from mytable limit 100"\n  }\n}\n\nsink {\n  Console {}\n}\n')),(0,a.yg)("h3",{id:"parallel-reading-with-table_path"},"Parallel reading with table_path:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-hocon"},'env {\n  parallelism = 4\n  job.mode = "BATCH"\n}\n\nsource {\n  Jdbc {\n    url = "jdbc:postgresql://localhost:5432/cloudberrydb"\n    driver = "org.postgresql.Driver"\n    user = "dbadmin"\n    password = "password"\n    table_path = "public.mytable"\n    split.size = 10000\n  }\n}\n\nsink {\n  Console {}\n}\n')),(0,a.yg)("h3",{id:"multiple-table-read"},"Multiple table read:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-hocon"},'env {\n  job.mode = "BATCH"\n  parallelism = 4\n}\n\nsource {\n  Jdbc {\n    url = "jdbc:postgresql://localhost:5432/cloudberrydb"\n    driver = "org.postgresql.Driver"\n    user = "dbadmin"\n    password = "password"\n    "table_list" = [\n      {\n        "table_path" = "public.table1"\n      },\n      {\n        "table_path" = "public.table2"\n      }\n    ]\n    split.size = 10000\n  }\n}\n\nsink {\n  Console {}\n}\n')),(0,a.yg)("p",null,"For more detailed examples and configurations, please refer to the PostgreSQL connector documentation."),(0,a.yg)("h2",{id:"changelog"},"Changelog"),(0,a.yg)(l.default,{mdxType:"ChangeLog"}))}g.isMDXComponent=!0}}]);