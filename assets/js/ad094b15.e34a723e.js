"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[97473],{15680:(e,n,a)=>{a.d(n,{xA:()=>c,yg:()=>d});var t=a(96540);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var u=t.createContext({}),i=function(e){var n=t.useContext(u),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},c=function(e){var n=i(e.components);return t.createElement(u.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=i(a),g=l,d=p["".concat(u,".").concat(g)]||p[g]||m[g]||o;return a?t.createElement(d,r(r({ref:n},c),{},{components:a})):t.createElement(d,r({ref:n},c))}));function d(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=a.length,r=new Array(o);r[0]=g;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[p]="string"==typeof e?e:l,r[1]=s;for(var i=2;i<o;i++)r[i]=a[i];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},19365:(e,n,a)=>{a.d(n,{A:()=>r});var t=a(96540),l=a(20053);const o={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:a,className:r}=e;return t.createElement("div",{role:"tabpanel",className:(0,l.A)(o.tabItem,r),hidden:a},n)}},11470:(e,n,a)=>{a.d(n,{A:()=>I});var t=a(58168),l=a(96540),o=a(20053),r=a(23104),s=a(56347),u=a(57485),i=a(31682),c=a(89466);function p(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:l}}=e;return{value:n,label:a,attributes:t,default:l}}))}function m(e){const{values:n,children:a}=e;return(0,l.useMemo)((()=>{const e=n??p(a);return function(e){const n=(0,i.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function g(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function d(e){let{queryString:n=!1,groupId:a}=e;const t=(0,s.W6)(),o=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,u.aZ)(o),(0,l.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(t.location.search);n.set(o,e),t.replace({...t.location,search:n.toString()})}),[o,t])]}function y(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,o=m(e),[r,s]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[u,i]=d({queryString:a,groupId:t}),[p,y]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,o]=(0,c.Dv)(a);return[t,(0,l.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:t}),h=(()=>{const e=u??p;return g({value:e,tabValues:o})?e:null})();(0,l.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:r,selectValue:(0,l.useCallback)((e=>{if(!g({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),i(e),y(e)}),[i,y,o]),tabValues:o}}var h=a(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:n,block:a,selectedValue:s,selectValue:u,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.a_)(),m=e=>{const n=e.currentTarget,a=c.indexOf(n),t=i[a].value;t!==s&&(p(n),u(t))},g=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;n=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;n=c[a]??c[c.length-1];break}}n?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":a},n)},i.map((e=>{let{value:n,label:a,attributes:r}=e;return l.createElement("li",(0,t.A)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>c.push(e),onKeyDown:g,onClick:m},r,{className:(0,o.A)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":s===n})}),a??n)})))}function k(e){let{lazy:n,children:a,selectedValue:t}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===t));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==t}))))}function N(e){const n=y(e);return l.createElement("div",{className:(0,o.A)("tabs-container",b.tabList)},l.createElement(f,(0,t.A)({},e,n)),l.createElement(k,(0,t.A)({},e,n)))}function I(e){const n=(0,h.A)();return l.createElement(N,(0,t.A)({key:String(n)},e))}},57743:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var t=a(58168),l=(a(96540),a(15680)),o=a(11470),r=a(19365);const s={sidebar_position:4},u="Set Up with Kubernetes",i={unversionedId:"start-v2/kubernetes/kubernetes",id:"start-v2/kubernetes/kubernetes",title:"Set Up with Kubernetes",description:"This section provides a quick guide to use SeaTunnel with Kubernetes.",source:"@site/docs/start-v2/kubernetes/kubernetes.mdx",sourceDirName:"start-v2/kubernetes",slug:"/start-v2/kubernetes/",permalink:"/docs/start-v2/kubernetes/",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/start-v2/kubernetes/kubernetes.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Set Up with Helm",permalink:"/docs/start-v2/kubernetes/helm"},next:{title:"Intro To Config File",permalink:"/docs/concept/config"}},c={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"SeaTunnel Docker Image",id:"seatunnel-docker-image",level:3},{value:"Deploying The Operator",id:"deploying-the-operator",level:3},{value:"Run SeaTunnel Application",id:"run-seatunnel-application",level:2},{value:"What&#39;s More",id:"whats-more",level:2}],m={toc:p},g="wrapper";function d(e){let{components:n,...a}=e;return(0,l.yg)(g,(0,t.A)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"set-up-with-kubernetes"},"Set Up with Kubernetes"),(0,l.yg)("p",null,"This section provides a quick guide to use SeaTunnel with Kubernetes."),(0,l.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.yg)("p",null,"We assume that you have one local installation as follow:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://docs.docker.com/"},"docker")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://kubernetes.io/"},"kubernetes")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://helm.sh/docs/intro/quickstart/"},"helm"))),(0,l.yg)("p",null,"So that the ",(0,l.yg)("inlineCode",{parentName:"p"},"kubectl")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"helm")," commands are available on your local system."),(0,l.yg)("p",null,"Take kubernetes ",(0,l.yg)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/start/"},"minikube")," as an example, you can start a cluster with the following command:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"minikube start --kubernetes-version=v1.23.3\n")),(0,l.yg)("h2",{id:"installation"},"Installation"),(0,l.yg)("h3",{id:"seatunnel-docker-image"},"SeaTunnel Docker Image"),(0,l.yg)("p",null,"To run the image with SeaTunnel, first create a ",(0,l.yg)("inlineCode",{parentName:"p"},"Dockerfile"),":"),(0,l.yg)(o.A,{groupId:"engine-type",defaultValue:"Zeta (local-mode)",values:[{label:"Flink",value:"flink"},{label:"Zeta (local-mode)",value:"Zeta (local-mode)"},{label:"Zeta (cluster-mode)",value:"Zeta (cluster-mode)"}],mdxType:"Tabs"},(0,l.yg)(r.A,{value:"flink",mdxType:"TabItem"},(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM flink:1.13\n\nENV SEATUNNEL_VERSION="2.3.10"\nENV SEATUNNEL_HOME="/opt/seatunnel"\n\nRUN wget https://dlcdn.apache.org/seatunnel/${SEATUNNEL_VERSION}/apache-seatunnel-${SEATUNNEL_VERSION}-bin.tar.gz\nRUN tar -xzvf apache-seatunnel-${SEATUNNEL_VERSION}-bin.tar.gz\nRUN mv apache-seatunnel-${SEATUNNEL_VERSION} ${SEATUNNEL_HOME}\n\nRUN cd ${SEATUNNEL_HOME} && sh bin/install-plugin.sh ${SEATUNNEL_VERSION}\n')),(0,l.yg)("p",null,"Then run the following commands to build the image:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"docker build -t seatunnel:2.3.10-flink-1.13 -f Dockerfile .\n")),(0,l.yg)("p",null,"Image ",(0,l.yg)("inlineCode",{parentName:"p"},"seatunnel:2.3.10-flink-1.13")," needs to be present in the host (minikube) so that the deployment can take place."),(0,l.yg)("p",null,"Load image to minikube via:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"minikube image load seatunnel:2.3.10-flink-1.13\n"))),(0,l.yg)(r.A,{value:"Zeta (local-mode)",mdxType:"TabItem"},(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM openjdk:8\n\nENV SEATUNNEL_VERSION="2.3.10"\nENV SEATUNNEL_HOME="/opt/seatunnel"\n\nRUN wget https://dlcdn.apache.org/seatunnel/${SEATUNNEL_VERSION}/apache-seatunnel-${SEATUNNEL_VERSION}-bin.tar.gz\nRUN tar -xzvf apache-seatunnel-${SEATUNNEL_VERSION}-bin.tar.gz\nRUN mv apache-seatunnel-${SEATUNNEL_VERSION} ${SEATUNNEL_HOME}\n\nRUN cd ${SEATUNNEL_HOME} && sh bin/install-plugin.sh ${SEATUNNEL_VERSION}\n')),(0,l.yg)("p",null,"Then run the following commands to build the image:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"docker build -t seatunnel:2.3.10 -f Dockerfile .\n")),(0,l.yg)("p",null,"Image ",(0,l.yg)("inlineCode",{parentName:"p"},"seatunnel:2.3.10")," need to be present in the host (minikube) so that the deployment can take place."),(0,l.yg)("p",null,"Load image to minikube via:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"minikube image load seatunnel:2.3.10\n"))),(0,l.yg)(r.A,{value:"Zeta (cluster-mode)",mdxType:"TabItem"},(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM openjdk:8\n\nENV SEATUNNEL_VERSION="2.3.10"\nENV SEATUNNEL_HOME="/opt/seatunnel"\n\nRUN wget https://dlcdn.apache.org/seatunnel/${SEATUNNEL_VERSION}/apache-seatunnel-${SEATUNNEL_VERSION}-bin.tar.gz\nRUN tar -xzvf apache-seatunnel-${SEATUNNEL_VERSION}-bin.tar.gz\nRUN mv apache-seatunnel-${SEATUNNEL_VERSION} ${SEATUNNEL_HOME}\nRUN mkdir -p $SEATUNNEL_HOME/logs\nRUN cd ${SEATUNNEL_HOME} && sh bin/install-plugin.sh ${SEATUNNEL_VERSION}\n')),(0,l.yg)("p",null,"Then run the following commands to build the image:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"docker build -t seatunnel:2.3.10 -f Dockerfile .\n")),(0,l.yg)("p",null,"Image ",(0,l.yg)("inlineCode",{parentName:"p"},"seatunnel:2.3.10")," needs to be present in the host (minikube) so that the deployment can take place."),(0,l.yg)("p",null,"Load image to minikube via:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"minikube image load seatunnel:2.3.10\n")))),(0,l.yg)("h3",{id:"deploying-the-operator"},"Deploying The Operator"),(0,l.yg)(o.A,{groupId:"engine-type",defaultValue:"Zeta (local-mode)",values:[{label:"Flink",value:"flink"},{label:"Zeta (local-mode)",value:"Zeta (local-mode)"},{label:"Zeta (cluster-mode)",value:"Zeta (cluster-mode)"}],mdxType:"Tabs"},(0,l.yg)(r.A,{value:"flink",mdxType:"TabItem"},(0,l.yg)("p",null,"The steps below provide a quick walk-through on setting up the Flink Kubernetes Operator.\nYou can refer to ",(0,l.yg)("a",{parentName:"p",href:"https://nightlies.apache.org/flink/flink-kubernetes-operator-docs-main/docs/try-flink-kubernetes-operator/quick-start/"},"Flink Kubernetes Operator - Quick Start")," for more details."),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Notice: All the Kubernetes resources bellow are created in default namespace.")),(0,l.yg)("p",null,"Install the certificate manager on your Kubernetes cluster to enable adding the webhook component (only needed once per Kubernetes cluster):"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl create -f https://github.com/jetstack/cert-manager/releases/download/v1.8.2/cert-manager.yaml\n")),(0,l.yg)("p",null,"Now you can deploy the latest stable Flink Kubernetes Operator version using the included Helm chart:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"helm repo add flink-operator-repo https://downloads.apache.org/flink/flink-kubernetes-operator-1.3.1/\n\nhelm install flink-kubernetes-operator flink-operator-repo/flink-kubernetes-operator \\\n--set image.repository=apache/flink-kubernetes-operator\n")),(0,l.yg)("p",null,"You may verify your installation via ",(0,l.yg)("inlineCode",{parentName:"p"},"kubectl"),":"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods\nNAME                                                   READY   STATUS    RESTARTS      AGE\nflink-kubernetes-operator-5f466b8549-mgchb             1/1     Running   3 (23h ago)   16d\n\n"))),(0,l.yg)(r.A,{value:"Zeta (local-mode)",mdxType:"TabItem"},"none"),(0,l.yg)(r.A,{value:"Zeta (cluster-mode)",mdxType:"TabItem"},"none")),(0,l.yg)("h2",{id:"run-seatunnel-application"},"Run SeaTunnel Application"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Run Application:"),": SeaTunnel already providers out-of-the-box ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/apache/seatunnel/tree/dev/config"},"configurations"),"."),(0,l.yg)(o.A,{groupId:"engine-type",defaultValue:"Zeta (local-mode)",values:[{label:"Flink",value:"flink"},{label:"Zeta (local-mode)",value:"Zeta (local-mode)"},{label:"Zeta (cluster-mode)",value:"Zeta (cluster-mode)"}],mdxType:"Tabs"},(0,l.yg)(r.A,{value:"flink",mdxType:"TabItem"},(0,l.yg)("p",null,"In this guide we will use ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/apache/seatunnel/blob/2.3.10-release/config/v2.streaming.conf.template"},"seatunnel.streaming.conf"),":"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-conf"},'env {\n  parallelism = 1\n  job.mode = "STREAMING"\n  checkpoint.interval = 2000\n}\n\nsource {\n    FakeSource {\n      plugin_output = "fake"\n      row.num = 160000\n      schema = {\n        fields {\n          name = "string"\n          age = "int"\n        }\n      }\n    }\n}\n\ntransform {\n  FieldMapper {\n    plugin_input = "fake"\n    plugin_output = "fake1"\n    field_mapper = {\n      age = age\n      name = new_name\n    }\n  }\n}\n\nsink {\n  Console {\n    plugin_input = "fake1"\n  }\n}\n')),(0,l.yg)("p",null,"Generate a configmap named seatunnel-config in Kubernetes for the seatunnel.streaming.conf so that we can mount the config content in pod."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl create cm seatunnel-config \\\n--from-file=seatunnel.streaming.conf=seatunnel.streaming.conf\n")),(0,l.yg)("p",null,"Once the Flink Kubernetes Operator is running as seen in the previous steps you are ready to submit a Flink (SeaTunnel) job:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Create ",(0,l.yg)("inlineCode",{parentName:"li"},"seatunnel-flink.yaml")," FlinkDeployment manifest:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: flink.apache.org/v1beta1\nkind: FlinkDeployment\nmetadata:\n  name: seatunnel-flink-streaming-example\nspec:\n  image: seatunnel:2.3.10-flink-1.13\n  flinkVersion: v1_13\n  flinkConfiguration:\n    taskmanager.numberOfTaskSlots: "2"\n  serviceAccount: flink\n  jobManager:\n    replicas: 1\n    resource:\n      memory: "1024m"\n      cpu: 1\n  taskManager:\n    resource:\n      memory: "1024m"\n      cpu: 1\n  podTemplate:\n    spec:\n      containers:\n        - name: flink-main-container\n          volumeMounts:\n            - name: seatunnel-config\n              mountPath: /data/seatunnel.streaming.conf\n              subPath: seatunnel.streaming.conf\n      volumes:\n        - name: seatunnel-config\n          configMap:\n            name: seatunnel-config\n            items:\n            - key: seatunnel.streaming.conf\n              path: seatunnel.streaming.conf\n  job:\n    jarURI: local:///opt/seatunnel/starter/seatunnel-flink-13-starter.jar\n    entryClass: org.apache.seatunnel.core.starter.flink.SeaTunnelFlink\n    args: ["--config", "/data/seatunnel.streaming.conf"]\n    parallelism: 2\n    upgradeMode: stateless\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Run the example application:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f seatunnel-flink.yaml\n"))),(0,l.yg)(r.A,{value:"Zeta (local-mode)",mdxType:"TabItem"},(0,l.yg)("p",null,"In this guide we will use ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/apache/seatunnel/blob/2.3.10-release/config/v2.streaming.conf.template"},"seatunnel.streaming.conf"),":"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-conf"},'env {\n  parallelism = 2\n  job.mode = "STREAMING"\n  checkpoint.interval = 2000\n}\n\nsource {\n  FakeSource {\n    parallelism = 2\n    plugin_output = "fake"\n    row.num = 16\n    schema = {\n      fields {\n        name = "string"\n        age = "int"\n      }\n    }\n  }\n}\n\nsink {\n  Console {\n  }\n}\n')),(0,l.yg)("p",null,"Generate a configmap named seatunnel-config in Kubernetes for the seatunnel.streaming.conf so that we can mount the config content in pod."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl create cm seatunnel-config \\\n--from-file=seatunnel.streaming.conf=seatunnel.streaming.conf\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Create ",(0,l.yg)("inlineCode",{parentName:"li"},"seatunnel.yaml"),":")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: seatunnel\nspec:\n  containers:\n  - name: seatunnel\n    image: seatunnel:2.3.10\n    command: ["/bin/sh","-c","/opt/seatunnel/bin/seatunnel.sh --config /data/seatunnel.streaming.conf -e local"]\n    resources:\n      limits:\n        cpu: "1"\n        memory: 4G\n      requests:\n        cpu: "1"\n        memory: 2G\n    volumeMounts:\n      - name: seatunnel-config\n        mountPath: /data/seatunnel.streaming.conf\n        subPath: seatunnel.streaming.conf\n  volumes:\n        - name: seatunnel-config\n          configMap:\n            name: seatunnel-config\n            items:\n            - key: seatunnel.streaming.conf\n              path: seatunnel.streaming.conf\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Run the example application:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f seatunnel.yaml\n"))),(0,l.yg)(r.A,{value:"Zeta (cluster-mode)",mdxType:"TabItem"},(0,l.yg)("p",null,"In this guide we will use ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/apache/seatunnel/blob/2.3.10-release/config/v2.streaming.conf.template"},"seatunnel.streaming.conf"),":"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-conf"},'env {\n  parallelism = 2\n  job.mode = "STREAMING"\n  checkpoint.interval = 2000\n}\n\nsource {\n  FakeSource {\n    parallelism = 2\n    plugin_output = "fake"\n    row.num = 16\n    schema = {\n      fields {\n        name = "string"\n        age = "int"\n      }\n    }\n  }\n}\n\nsink {\n  Console {\n  }\n}\n')),(0,l.yg)("p",null,"Generate a configmap named seatunnel-config in Kubernetes for the seatunnel.streaming.conf so that we can mount the config content in pod."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl create cm seatunnel-config \\\n--from-file=seatunnel.streaming.conf=seatunnel.streaming.conf\n")),(0,l.yg)("p",null,"Then, we use the following command to load some configuration files used by the seatunnel cluster into the configmap"),(0,l.yg)("p",null,"Create the yaml file locally as follows"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Create ",(0,l.yg)("inlineCode",{parentName:"li"},"hazelcast-client.yaml"),":")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-yaml"},"\nhazelcast-client:\n  cluster-name: seatunnel\n  properties:\n    hazelcast.logging.type: log4j2\n  network:\n    cluster-members:\n      - localhost:5801\n\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Create ",(0,l.yg)("inlineCode",{parentName:"li"},"hazelcast.yaml"),":")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-yaml"},"\nhazelcast:\n  cluster-name: seatunnel\n  network:\n    rest-api:\n      enabled: true\n      endpoint-groups:\n        CLUSTER_WRITE:\n          enabled: true\n        DATA:\n          enabled: true\n    join:\n      tcp-ip:\n        enabled: true\n        member-list:\n          - localhost\n    port:\n      auto-increment: false\n      port: 5801\n  properties:\n    hazelcast.invocation.max.retry.count: 20\n    hazelcast.tcp.join.port.try.count: 30\n    hazelcast.logging.type: log4j2\n    hazelcast.operation.generic.thread.count: 50\n\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Create ",(0,l.yg)("inlineCode",{parentName:"li"},"seatunnel.yaml"),":")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-yaml"},"seatunnel:\n  engine:\n    history-job-expire-minutes: 1440\n    backup-count: 1\n    queue-type: blockingqueue\n    print-execution-info-interval: 60\n    print-job-metrics-info-interval: 60\n    slot-service:\n      dynamic-slot: true\n    checkpoint:\n      interval: 10000\n      timeout: 60000\n      storage:\n        type: hdfs\n        max-retained: 3\n        plugin-config:\n          namespace: /tmp/seatunnel/checkpoint_snapshot\n          storage.type: hdfs\n          fs.defaultFS: file:///tmp/ # Ensure that the directory has written permission\n")),(0,l.yg)("p",null,"Create congfigmaps for the configuration file using the following command"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl create configmap hazelcast-client  --from-file=hazelcast-client.yaml\nkubectl create configmap hazelcast  --from-file=hazelcast.yaml\nkubectl create configmap seatunnelmap  --from-file=seatunnel.yaml\n\n")),(0,l.yg)("p",null,"Deploy Reloader to achieve hot deployment\nWe use the Reloader here to automatically restart the pod when the configuration file or other modifications are made. You can also directly give the value of the configuration file and do not use the Reloader"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://github.com/stakater/Reloader/"},"Reloader"))),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"wget https://raw.githubusercontent.com/stakater/Reloader/master/deployments/kubernetes/reloader.yaml\nkubectl apply -f reloader.yaml\n\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Create ",(0,l.yg)("inlineCode",{parentName:"li"},"seatunnel-cluster.yml"),":")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Service\nmetadata:\n  name: seatunnel\nspec:\n  selector:\n    app: seatunnel\n  ports:\n  - port: 5801\n    name: seatunnel\n  clusterIP: None\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: seatunnel\n  annotations:\n    configmap.reloader.stakater.com/reload: "hazelcast,hazelcast-client,seatunnelmap"\nspec:\n  serviceName: "seatunnel"\n  replicas: 3  # modify replicas according to your case\n  selector:\n    matchLabels:\n      app: seatunnel\n  template:\n    metadata:\n      labels:\n        app: seatunnel\n    spec:\n      containers:\n        - name: seatunnel\n          image: seatunnel:2.3.10\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 5801\n              name: client\n          command: ["/bin/sh","-c","/opt/seatunnel/bin/seatunnel-cluster.sh -DJvmOption=-Xms2G -Xmx2G"]\n          resources:\n            limits:\n              cpu: "1"\n              memory: 4G\n            requests:\n              cpu: "1"\n              memory: 2G\n          volumeMounts:\n            - mountPath: "/opt/seatunnel/config/hazelcast.yaml"\n              name: hazelcast\n              subPath: hazelcast.yaml\n            - mountPath: "/opt/seatunnel/config/hazelcast-client.yaml"\n              name: hazelcast-client\n              subPath: hazelcast-client.yaml\n            - mountPath: "/opt/seatunnel/config/seatunnel.yaml"\n              name: seatunnelmap\n              subPath: seatunnel.yaml\n            - mountPath: /data/seatunnel.streaming.conf\n              name: seatunnel-config\n              subPath: seatunnel.streaming.conf\n      volumes:\n        - name: hazelcast\n          configMap:\n            name: hazelcast\n        - name: hazelcast-client\n          configMap:\n            name: hazelcast-client\n        - name: seatunnelmap\n          configMap:\n            name: seatunnelmap\n        - name: seatunnel-config\n          configMap:\n            name: seatunnel-config\n            items:\n            - key: seatunnel.streaming.conf\n              path: seatunnel.streaming.conf\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Starting a cluster:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f seatunnel-cluster.yml\n")),(0,l.yg)("p",null,"Then modify the seatunnel configuration in pod using the following command:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl edit cm hazelcast\n")),(0,l.yg)("p",null,"Change the member-list option to your cluster address"),(0,l.yg)("p",null,"This uses the headless service access mode"),(0,l.yg)("p",null,"The format for accessing between general pods is ","[pod-name]",".","[service-name]",".","[namespace]",".svc.cluster.local"),(0,l.yg)("p",null,"for example:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"- seatunnel-0.seatunnel.default.svc.cluster.local\n- seatunnel-1.seatunnel.default.svc.cluster.local\n- seatunnel-2.seatunnel.default.svc.cluster.local\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl edit cm hazelcast-client\n")),(0,l.yg)("p",null,"Change the cluster-members option to your cluster address"),(0,l.yg)("p",null,"for example:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"- seatunnel-0.seatunnel.default.svc.cluster.local:5801\n- seatunnel-1.seatunnel.default.svc.cluster.local:5801\n- seatunnel-2.seatunnel.default.svc.cluster.local:5801\n")),(0,l.yg)("p",null,"Later, you will see that the pod automatically restarts and updates the seatunnel configuration"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl edit cm hazelcast-client\n")),(0,l.yg)("p",null,"After we wait for all pod updates to be completed, we can use the following command to check if the configuration inside the pod has been updated"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl exec -it  seatunnel-0  -- cat /opt/seatunnel/config/hazelcast-client.yaml\n")),(0,l.yg)("p",null,"Afterwards, we can submit tasks to any pod"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl exec -it  seatunnel-0  -- /opt/seatunnel/bin/seatunnel.sh --config /data/seatunnel.streaming.conf\n")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"See The Output")),(0,l.yg)(o.A,{groupId:"engine-type",defaultValue:"Zeta (local-mode)",values:[{label:"Flink",value:"flink"},{label:"Zeta (local-mode)",value:"Zeta (local-mode)"},{label:"Zeta (cluster-mode)",value:"Zeta (cluster-mode)"}],mdxType:"Tabs"},(0,l.yg)(r.A,{value:"flink",mdxType:"TabItem"},(0,l.yg)("p",null,"You may follow the logs of your job, after a successful startup (which can take on the order of a minute in a fresh environment, seconds afterwards) you can:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f deploy/seatunnel-flink-streaming-example\n")),(0,l.yg)("p",null,"looks like the below:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-shell"},"...\n2023-01-31 12:13:54,349 INFO  org.apache.flink.runtime.executiongraph.ExecutionGraph       [] - Source: SeaTunnel FakeSource -> Sink Writer: Console (1/1) (1665d2d011b2f6cf6525c0e5e75ec251) switched from SCHEDULED to DEPLOYING.\n2023-01-31 12:13:56,684 INFO  org.apache.flink.runtime.executiongraph.ExecutionGraph       [] - Deploying Source: SeaTunnel FakeSource -> Sink Writer: Console (1/1) (attempt #0) with attempt id 1665d2d011b2f6cf6525c0e5e75ec251 to seatunnel-flink-streaming-example-taskmanager-1-1 @ 100.103.244.106 (dataPort=39137) with allocation id fbe162650c4126649afcdaff00e46875\n2023-01-31 12:13:57,794 INFO  org.apache.flink.runtime.executiongraph.ExecutionGraph       [] - Source: SeaTunnel FakeSource -> Sink Writer: Console (1/1) (1665d2d011b2f6cf6525c0e5e75ec251) switched from DEPLOYING to INITIALIZING.\n2023-01-31 12:13:58,203 INFO  org.apache.flink.runtime.executiongraph.ExecutionGraph       [] - Source: SeaTunnel FakeSource -> Sink Writer: Console (1/1) (1665d2d011b2f6cf6525c0e5e75ec251) switched from INITIALIZING to RUNNING.\n")),(0,l.yg)("p",null,"If OOM error accur in the log, you can decrease the ",(0,l.yg)("inlineCode",{parentName:"p"},"row.num")," value in seatunnel.streaming.conf"),(0,l.yg)("p",null,"To expose the Flink Dashboard you may add a port-forward rule:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl port-forward svc/seatunnel-flink-streaming-example-rest 8081\n")),(0,l.yg)("p",null,"Now the Flink Dashboard is accessible at ",(0,l.yg)("a",{parentName:"p",href:"http://localhost:8081"},"localhost:8081"),"."),(0,l.yg)("p",null,"Or launch ",(0,l.yg)("inlineCode",{parentName:"p"},"minikube dashboard")," for a web-based Kubernetes user interface."),(0,l.yg)("p",null,"The content printed in the TaskManager Stdout log:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl logs \\\n-l 'app in (seatunnel-flink-streaming-example), component in (taskmanager)' \\\n--tail=-1 \\\n-f\n")),(0,l.yg)("p",null,"looks like the below (your content may be different since we use ",(0,l.yg)("inlineCode",{parentName:"p"},"FakeSource")," to automatically generate random stream data):"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-shell"},"...\nsubtaskIndex=0: row=159991 : VVgpp, 978840000\nsubtaskIndex=0: row=159992 : JxrOC, 1493825495\nsubtaskIndex=0: row=159993 : YmCZR, 654146216\nsubtaskIndex=0: row=159994 : LdmUn, 643140261\nsubtaskIndex=0: row=159995 : tURkE, 837012821\nsubtaskIndex=0: row=159996 : uPDfd, 2021489045\nsubtaskIndex=0: row=159997 : mjrdG, 2074957853\nsubtaskIndex=0: row=159998 : xbeUi, 864518418\nsubtaskIndex=0: row=159999 : sSWLb, 1924451911\nsubtaskIndex=0: row=160000 : AuPlM, 1255017876\n")),(0,l.yg)("p",null,"To stop your job and delete your FlinkDeployment you can simply:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl delete -f seatunnel-flink.yaml\n"))),(0,l.yg)(r.A,{value:"Zeta (local-mode)",mdxType:"TabItem"},(0,l.yg)("p",null,"You may follow the logs of your job, after a successful startup (which can take on the order of a minute in a fresh environment, seconds afterwards) you can:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f  seatunnel\n")),(0,l.yg)("p",null,"looks like the below (your content may be different since we use ",(0,l.yg)("inlineCode",{parentName:"p"},"FakeSource")," to automatically generate random stream data):"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-shell"},"...\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25673:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : hRJdE, 1295862507\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25674:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : kXlew, 935460726\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25675:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : FrNOT, 1714358118\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25676:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : kSajX, 126709414\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25677:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : YhpQv, 2020198351\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25678:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : nApin, 691339553\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25679:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : KZNNa, 1720773736\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25680:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : uCUBI, 490868386\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25681:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : oTLmO, 98770781\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25682:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : UECud, 835494636\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25683:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : XNegY, 1602828896\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25684:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : LcFBx, 1400869177\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25685:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : EqSfF, 1933614060\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25686:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : BODIs, 1839533801\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25687:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : doxcI, 970104616\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25688:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : IEVYn, 371893767\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25689:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : YXYfq, 1719257882\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25690:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : LFWEm, 725033360\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25691:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : ypUrY, 1591744616\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25692:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : rlnzJ, 412162913\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25693:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : zWKnt, 976816261\n2023-10-07 08:20:12,797 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=0  rowIndex=25694:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : PXrsk, 43554541\n\n")),(0,l.yg)("p",null,"To stop your job and delete your FlinkDeployment you can simply:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl delete -f seatunnel.yaml\n"))),(0,l.yg)(r.A,{value:"Zeta (cluster-mode)",mdxType:"TabItem"},(0,l.yg)("p",null,"You may follow the logs of your job, after a successful startup (which can take on the order of a minute in a fresh environment, seconds afterwards) you can:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl exec -it  seatunnel-1  -- tail -f /opt/seatunnel/logs/seatunnel-engine-server.log | grep ConsoleSinkWriter\n")),(0,l.yg)("p",null,"looks like the below (your content may be different since we use ",(0,l.yg)("inlineCode",{parentName:"p"},"FakeSource")," to automatically generate random stream data):"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-shell"},"...\n2023-10-10 08:05:07,283 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=1  rowIndex=7:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : IibHk, 820962465\n2023-10-10 08:05:07,283 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=1  rowIndex=8:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : lmKdb, 1072498088\n2023-10-10 08:05:07,283 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=1  rowIndex=9:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : iqGva, 918730371\n2023-10-10 08:05:07,284 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=1  rowIndex=10:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : JMHmq, 1130771733\n2023-10-10 08:05:07,284 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=1  rowIndex=11:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : rxoHF, 189596686\n2023-10-10 08:05:07,284 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=1  rowIndex=12:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : OSblw, 559472064\n2023-10-10 08:05:07,284 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=1  rowIndex=13:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : yTZjG, 1842482272\n2023-10-10 08:05:07,284 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=1  rowIndex=14:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : RRiMg, 1713777214\n2023-10-10 08:05:07,284 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=1  rowIndex=15:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : lRcsd, 1626041649\n2023-10-10 08:05:07,284 INFO  org.apache.seatunnel.connectors.seatunnel.console.sink.ConsoleSinkWriter - subtaskIndex=1  rowIndex=16:  SeaTunnelRow#tableId= SeaTunnelRow#kind=INSERT : QrNNW, 41355294\n\n")),(0,l.yg)("p",null,"To stop your job and delete your FlinkDeployment you can simply:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"kubectl delete -f  seatunnel-cluster.yaml\n")))),(0,l.yg)("p",null,"Happy SeaTunneling!"),(0,l.yg)("h2",{id:"whats-more"},"What's More"),(0,l.yg)("p",null,"For now, you have taken a quick look at SeaTunnel, and you can see ",(0,l.yg)("a",{parentName:"p",href:"../../connector-v2/source"},"connector")," to find all sources and sinks SeaTunnel supported.\nOr see ",(0,l.yg)("a",{parentName:"p",href:"../deployment.mdx"},"deployment")," if you want to submit your application in another kind of your engine cluster."))}d.isMDXComponent=!0}}]);