"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[80341],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9475:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=t(58168),r=(t(96540),t(15680));const o={sidebar_position:3},i="Source Common Options",l={unversionedId:"connector-v2/source-common-options",id:"version-2.3.9/connector-v2/source-common-options",title:"Source Common Options",description:"Common parameters of source connectors",source:"@site/versioned_docs/version-2.3.9/connector-v2/source-common-options.md",sourceDirName:"connector-v2",slug:"/connector-v2/source-common-options",permalink:"/docs/2.3.9/connector-v2/source-common-options",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/versioned_docs/version-2.3.9/connector-v2/source-common-options.md",tags:[],version:"2.3.9",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Protobuf Format",permalink:"/docs/2.3.9/connector-v2/formats/protobuf"},next:{title:"Sink Common Options",permalink:"/docs/2.3.9/connector-v2/sink-common-options"}},p={},s=[{value:"Task Example",id:"task-example",level:2},{value:"Simple:",id:"simple",level:3},{value:"Multiple Pipeline Simple",id:"multiple-pipeline-simple",level:3}],c={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"source-common-options"},"Source Common Options"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Common parameters of source connectors")),(0,r.yg)("admonition",{title:"warn",type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"The old configuration name ",(0,r.yg)("inlineCode",{parentName:"p"},"result_table_name")," is deprecated, please migrate to the new name ",(0,r.yg)("inlineCode",{parentName:"p"},"plugin_output")," as soon as possible.")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Required"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"plugin_output"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"When ",(0,r.yg)("inlineCode",{parentName:"td"},"plugin_output")," is not specified, the data processed by this plugin will not be registered as a data set ",(0,r.yg)("inlineCode",{parentName:"td"},"(dataStream/dataset)")," that can be directly accessed by other plugins, or called a temporary table ",(0,r.yg)("inlineCode",{parentName:"td"},"(table)")," ",(0,r.yg)("br",null),"When ",(0,r.yg)("inlineCode",{parentName:"td"},"plugin_output")," is specified, the data processed by this plugin will be registered as a data set ",(0,r.yg)("inlineCode",{parentName:"td"},"(dataStream/dataset)")," that can be directly accessed by other plugins, or called a temporary table ",(0,r.yg)("inlineCode",{parentName:"td"},"(table)")," . The data set ",(0,r.yg)("inlineCode",{parentName:"td"},"(dataStream/dataset)")," registered here can be directly accessed by other plugins by specifying ",(0,r.yg)("inlineCode",{parentName:"td"},"plugin_input")," .")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"parallelism"),(0,r.yg)("td",{parentName:"tr",align:null},"Int"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"When ",(0,r.yg)("inlineCode",{parentName:"td"},"parallelism")," is not specified, the ",(0,r.yg)("inlineCode",{parentName:"td"},"parallelism")," in env is used by default. ",(0,r.yg)("br",null),"When parallelism is specified, it will override the parallelism in env.")))),(0,r.yg)("h1",{id:"important-note"},"Important note"),(0,r.yg)("p",null,"When the job configuration ",(0,r.yg)("inlineCode",{parentName:"p"},"plugin_output")," you must set the ",(0,r.yg)("inlineCode",{parentName:"p"},"plugin_input")," parameter"),(0,r.yg)("h2",{id:"task-example"},"Task Example"),(0,r.yg)("h3",{id:"simple"},"Simple:"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"This registers a stream or batch data source and returns the table name ",(0,r.yg)("inlineCode",{parentName:"p"},"fake_table")," at registration")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'source {\n    FakeSourceStream {\n        plugin_output = "fake_table"\n    }\n}\n')),(0,r.yg)("h3",{id:"multiple-pipeline-simple"},"Multiple Pipeline Simple"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"This is to convert the data source fake and write it to two different sinks")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'env {\n  job.mode = "BATCH"\n}\n\nsource {\n  FakeSource {\n    plugin_output = "fake"\n    row.num = 100\n    schema = {\n      fields {\n        id = "int"\n        name = "string"\n        age = "int"\n        c_timestamp = "timestamp"\n        c_date = "date"\n        c_map = "map<string, string>"\n        c_array = "array<int>"\n        c_decimal = "decimal(30, 8)"\n        c_row = {\n          c_row = {\n            c_int = int\n          }\n        }\n      }\n    }\n  }\n}\n\ntransform {\n  Sql {\n    plugin_input = "fake"\n    plugin_output = "fake1"\n    # the query table name must same as field \'plugin_input\'\n    query = "select id, regexp_replace(name, \'.+\', \'b\') as name, age+1 as age, pi() as pi, c_timestamp, c_date, c_map, c_array, c_decimal, c_row from dual"\n  }\n  # The SQL transform support base function and criteria operation\n  # But the complex SQL unsupported yet, include: multi source table/rows JOIN and AGGREGATE operation and the like\n}\n\nsink {\n  Console {\n    plugin_input = "fake1"\n  }\n   Console {\n    plugin_input = "fake"\n  }\n}\n')))}m.isMDXComponent=!0}}]);